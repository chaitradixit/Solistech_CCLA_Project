<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>
CCLA_CommProcessing query
</title>
</head>
<body>

<@table CCLA_CommProcessing_Queries@>
<table border=1><caption><strong>Query Definition Table</strong></caption>
<tr>
	<td>name</td><td>queryStr</td><td>parameters</td>
</tr>
<tr>
	<td>qCommProc_GetAllInstructionProcesses</td>
	<td>SELECT * FROM REF_INSTRUCTION_PROCESS</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_GetAllInstructionActions</td>
	<td>SELECT * FROM REF_INSTRUCTION_ACTION</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_GetAllInstructionActionApplied</td>
	<td>SELECT * FROM INSTR_PROCESS_ACTION_APPLIED</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_GetAllModuleInstructionRulesApplied</td>
	<td>SELECT * FROM IRMODULE_INSTR_RULE_APPLIED</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_GetAllRoutingModules</td>
	<td>SELECT * FROM INSTRUCTION_ROUTING_MODULE</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_GetAllInstructionStatuses</td>
	<td>SELECT * FROM REF_INSTRUCTION_STATUS</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_GetPendingInstructionsByStatusId</td>
	<td>SELECT * FROM (
			SELECT i.*,

			rit.INSTRUCTION_TYPE_NAME,
			rit.TRANSACTION_TYPE_ID,
			rit.INSTRUCTION_DESCRIPTION,
			rit.IS_FINANCIAL_TRANSACTION,
			rit.SUBMIT_TO_SPP,
			rit.REQUIRE_SIGNATURES,
			rit.IS_SUPPORTING,
			rit.SETTLEMENT_OFFSET,
			rit.IS_STATIC_DATA_UPDATE

			FROM INSTRUCTION i
      
			INNER JOIN REF_INSTRUCTION_TYPE RIT ON (I.INSTRUCTION_TYPE_ID = RIT.INSTRUCTION_TYPE_ID)
			WHERE INSTRUCTION_STATUS_ID = ?	
			ORDER BY 
				PRIORITY DESC,
				DECODE(rit.TRANSACTION_TYPE_ID, 
				NULL, DECODE(rit.INSTRUCTION_TYPE_ID,
					'128', 1,
					'129', 2,
					'126', 3,
					'137', 4,
					'130', 5,
					'131', 6,
					7),
				0), 
				I.INSTRUCTION_ID ASC
		) WHERE ROWNUM <= ?</td>
	<td>INSTRUCTION_STATUS_ID int
		NUM_INSTRUCTIONS_TO_PROCESS int</td>
</tr>
<tr>
	<td>qCommProc_GetInstructionLock</td>
	<td>SELECT * FROM INSTRUCTION_LOCK lok 
		INNER JOIN INSTRUCTION_ROUTING_MODULE mod 
		ON (lok.MODULE_ID = mod.MODULE_ID)
		WHERE INSTRUCTION_ID = ?</td>
	<td>INSTRUCTION_ID int</td>
</tr>
<tr>
	<td>qCommProcess_GetLockedInstructionIdsByStatusId</td>
	<td>SELECT i.INSTRUCTION_ID FROM INSTRUCTION i 
		INNER JOIN INSTRUCTION_LOCK il ON (i.INSTRUCTION_ID = il.INSTRUCTION_ID)
		WHERE i.INSTRUCTION_STATUS_ID = ?
		AND il.INSTRUCTION_ID NOT IN (
		  SELECT INSTRUCTION_ID FROM INSTRUCTION_PROCESS_APPLIED
		  WHERE PROCESS_END_DATE IS NULL
		)</td>
	<td>INSTRUCTION_STATUS_ID int</td>
</tr>
<tr>
	<td>qClientServices_GetNextInstructionProcessAppliedId</td>
	<td>SELECT SEQ_INSTR_PROCESS_APPLIED.NEXTVAL FROM DUAL</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_AddInstructionLock</td>
	<td>INSERT INTO INSTRUCTION_LOCK 
		(INSTRUCTION_ID, MODULE_ID, LOCK_DATE, IS_SUSPENDED)
		VALUES (?,?,SYSDATE,?)</td>
	<td>INSTRUCTION_ID int
		MODULE_ID int
		IS_SUSPENDED int</td>
</tr>
<tr>
	<td>qCommProc_UpdateInstructionLock</td>
	<td>UPDATE INSTRUCTION_LOCK 
		SET MODULE_ID=?, 
		LOCK_DATE=?,
		IS_SUSPENDED=?
		WHERE INSTRUCTION_ID=?</td>
	<td>MODULE_ID int
		LOCK_DATE date
		IS_SUSPENDED int
		INSTRUCTION_ID int</td>
</tr>
<tr>
	<td>qCommProc_RemoveInstructionLock</td>
	<td>DELETE FROM INSTRUCTION_LOCK 
		WHERE INSTRUCTION_ID=?</td>
	<td>INSTRUCTION_ID int</td>
</tr>
<tr>
	<td>qCommProc_GetActiveInstructionProcess</td>
	<td>SELECT * FROM INSTRUCTION_PROCESS_APPLIED
		WHERE INSTRUCTION_ID=?
		AND PROCESS_END_DATE IS NULL</td>
	<td>INSTRUCTION_ID int</td>
</tr>
<tr>
	<td>qCommProc_GetInstructionProcessApplied</td>
	<td>SELECT * FROM INSTRUCTION_PROCESS_APPLIED
		WHERE INSTR_PROCESS_APPLIED_ID=?</td>
	<td>INSTR_PROCESS_APPLIED_ID int</td>
</tr>
<tr>
	<td>qCommProc_AddInstructionProcessApplied</td>
	<td>INSERT INTO INSTRUCTION_PROCESS_APPLIED 
		(INSTR_PROCESS_APPLIED_ID, INSTRUCTION_ID, INSTRUCTION_PROCESS_ID, 
		DESCRIPTION, PROCESS_START_DATE, PROCESS_END_DATE, PROCESS_USER, 
		INSTRUCTION_ACTION_ID)
		VALUES (?,?,?,?,SYSDATE,?,?,?)</td>
	<td>INSTR_PROCESS_APPLIED_ID int
		INSTRUCTION_ID int
		INSTRUCTION_PROCESS_ID int
		DESCRIPTION varchar
		PROCESS_END_DATE date
		PROCESS_USER varchar
		INSTRUCTION_ACTION_ID int</td>
</tr>
<tr>
	<td>qCommProc_UpdateInstructionProcessApplied</td>
	<td>UPDATE INSTRUCTION_PROCESS_APPLIED SET  
		DESCRIPTION=?, 
		PROCESS_END_DATE=?, 
		PROCESS_USER=?,	
		INSTRUCTION_ACTION_ID=?
		WHERE INSTR_PROCESS_APPLIED_ID=?</td>
	<td>DESCRIPTION varchar
		PROCESS_END_DATE date
		PROCESS_USER varchar
		INSTRUCTION_ACTION_ID int
		INSTR_PROCESS_APPLIED_ID int</td>
</tr>
<tr>
	<td>qCommProc_UpdateRoutingModule</td>
	<td>UPDATE INSTRUCTION_ROUTING_MODULE SET
		MODULE_ID=?,
		MODULE_NAME=?,
		LISTEN_STATUS_ID=?,
		SKIP_STATUS_ID=?,
		ENTRY_STATUS_ID=?,
		PASS_STATUS_ID=?,
		FAIL_STATUS_ID=?, 
		IS_ENABLED=?, 
		HANDLER_CLASS=?, 
		LAST_UPDATED=SYSDATE,
		EXECUTION_ORDER=?
		WHERE MODULE_ID = ?</td>
	<td>MODULE_ID int
		MODULE_NAME varchar
		LISTEN_STATUS_ID int
		SKIP_STATUS_ID int
		ENTRY_STATUS_ID int
		PASS_STATUS_ID int
		FAIL_STATUS_ID int
		IS_ENABLED int
		HANDLER_CLASS varchar
		EXECUTION_ORDER int
		MODULE_ID int</td>
</tr>

<tr>
	<td>qCommProc_GetInstructionProcessActionApplied</td>
	<td>SELECT * FROM INSTR_PROCESS_ACTION_APPLIED actAppl
		INNER JOIN REF_INSTRUCTION_ACTION act ON (actAppl.INSTRUCTION_ACTION_ID = act.INSTRUCTION_ACTION_ID)
		WHERE actAppl.INSTRUCTION_PROCESS_ID = ?</td>
	<td>INSTRUCTION_PROCESS_ID int</td>
</tr>
<tr>
	<td>qCommProc_GetUCMDocMeta</td>
	<td>SELECT * FROM Revisions r INNER JOIN DocMeta dm ON (r.dID = dm.dID AND r.dRevRank=0)
		WHERE r.dID = ?</td>
	<td>DOC_ID int</td>
</tr>
<tr>
<td>qCommProc_GetAllModuleInfo</td>
	<td>SELECT IRM.*, 
		RIS1.INSTRUCTION_STATUS_NAME AS LISTEN_STATUS_NAME, 
		RIS2.INSTRUCTION_STATUS_NAME AS SKIP_STATUS_NAME,
		RIS3.INSTRUCTION_STATUS_NAME AS ENTRY_STATUS_NAME, 
		RIS4.INSTRUCTION_STATUS_NAME AS PASS_STATUS_NAME, 
		RIS5.INSTRUCTION_STATUS_NAME AS FAIL_STATUS_NAME 
		
		FROM INSTRUCTION_ROUTING_MODULE IRM
		LEFT JOIN REF_INSTRUCTION_STATUS RIS1 ON (IRM.LISTEN_STATUS_ID = RIS1.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS2 ON (IRM.SKIP_STATUS_ID = RIS2.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS3 ON (IRM.ENTRY_STATUS_ID = RIS3.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS4 ON (IRM.PASS_STATUS_ID = RIS4.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS5 ON (IRM.FAIL_STATUS_ID = RIS5.INSTRUCTION_STATUS_ID)
		
		ORDER BY EXECUTION_ORDER ASC</td>
	<td></td>
</tr>
<tr>
<td>qCommProc_GetModuleInfo</td>
	<td>SELECT IRM.*, 
		RIS1.INSTRUCTION_STATUS_NAME AS LISTEN_STATUS_NAME, 
		RIS2.INSTRUCTION_STATUS_NAME AS SKIP_STATUS_NAME,
		RIS3.INSTRUCTION_STATUS_NAME AS ENTRY_STATUS_NAME, 
		RIS4.INSTRUCTION_STATUS_NAME AS PASS_STATUS_NAME, 
		RIS5.INSTRUCTION_STATUS_NAME AS FAIL_STATUS_NAME 
		
		FROM INSTRUCTION_ROUTING_MODULE IRM
		LEFT JOIN REF_INSTRUCTION_STATUS RIS1 ON (IRM.LISTEN_STATUS_ID = RIS1.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS2 ON (IRM.SKIP_STATUS_ID = RIS2.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS3 ON (IRM.ENTRY_STATUS_ID = RIS3.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS4 ON (IRM.PASS_STATUS_ID = RIS4.INSTRUCTION_STATUS_ID)
		LEFT JOIN REF_INSTRUCTION_STATUS RIS5 ON (IRM.FAIL_STATUS_ID = RIS5.INSTRUCTION_STATUS_ID)
		
		WHERE MODULE_ID = ?</td>
	<td>MODULE_ID int</td>
</tr>
<tr>
	<td>qCommProc_GetInstructionAuditData</td>
	<td>SELECT * FROM V_INSTRUCTION_AUDIT
		WHERE INSTRUCTION_ID=?
		ORDER BY INSTRUCTION_AUDIT_ID DESC</td>
	<td>INSTRUCTION_ID int</td>
</tr>
<tr>
	<td>qCommProc_GetInstructionDocsForClass_FIXME</td>
	<td>SELECT r.dDocName, r.dID FROM DOCMETA DM 
		INNER JOIN INSTRUCTION INS ON (DM.DID = INS.INSTRUCTION_DOC_ID)
		INNER JOIN REVISIONS R ON (R.DID = DM.DID)
		WHERE DM.XDOCUMENTCLASS = ? 
		AND (R.DINDATE >= ? and R.DINDATE <= ?)</td>
	<td>DOCUMENT_CLASS varchar
		FROM_DATE date
		TO_DATE date
		</td>
</tr>
<tr>
	<td>qCommProc_GetPendingSDUInstructions</td>
	<td>SELECT i.INSTRUCTION_ID, rit.INSTRUCTION_TYPE_NAME, 
	i.INSTRUCTION_STATUS_ID,
	ris.INSTRUCTION_STATUS_NAME,
	i.PROCESS_DATE, i.DATE_ADDED,
  cg.UCM_BATCH_REF,
  cg.SPP_BATCH_REF,
	idv_isauth.INSTRUCTION_NUM_VALUE AS IS_AUTHORISED,
	idv_errmsg.INSTRUCTION_STRING_VALUE AS ERROR_MESSAGE,
	comp.COMPANY_CODE,
	DECODE(CLIENT_NUMBER_PADDING,
      NULL, NULL,
      6, TRIM(TO_CHAR(clMap.CLIENT_NUMBER, '000000')),
      5, TRIM(TO_CHAR(clMap.CLIENT_NUMBER, '00000'))) AS CLIENT_NUMBER,
	org.ORGANISATION_ID,
	org.ORGANISATION_NAME,
	acc.ACCOUNT_ID,
	acc.SUBTITLE,
	acc.accountnumber,
	ACC.FUND_CODE,
	wba.ACCOUNT_NO AS WITHDRAWAL_ACCOUNT_NO,
	wba.SORT_CODE AS WITHDRAWAL_SORT_CODE,
	iba.ACCOUNT_NO AS INCOME_ACCOUNT_NO,
	iba.SORT_CODE AS INCOME_SORT_CODE,
	per.FULL_NAME AS CORR_FULL_NAME,
	per.PERSON_ID AS PERSON_ID,
	idv_comment.INSTRUCTION_STRING_VALUE AS INSTRUCTION_COMMENTS,
	i.PRIORITY
	FROM INSTRUCTION i

	LEFT JOIN INSTRUCTION_LOCK il ON (i.INSTRUCTION_ID = il.INSTRUCTION_ID)
  
  INNER JOIN COMM com ON (i.COMM_ID = com.COMM_ID)
  INNER JOIN COMM_GROUP cg ON (com.COMM_GROUP_ID = cg.COMM_GROUP_ID)
  
	INNER JOIN REF_INSTRUCTION_TYPE rit ON (i.INSTRUCTION_TYPE_ID = rit.INSTRUCTION_TYPE_ID)
	INNER JOIN REF_INSTRUCTION_STATUS ris ON (i.INSTRUCTION_STATUS_ID = ris.INSTRUCTION_STATUS_ID)

	-- ERROR_MESSAGE
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_errmsg ON (i.INSTRUCTION_ID = idv_errmsg.INSTRUCTION_ID AND idv_errmsg.INSTRUCTION_DATA_ID = 49)
	
	-- INSTRUCTION_COMMENTS
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_comment ON (i.INSTRUCTION_ID = idv_comment.INSTRUCTION_ID AND idv_comment.INSTRUCTION_DATA_ID = 18)

	-- IS_AUTHORISED
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_isauth ON (i.INSTRUCTION_ID = idv_isauth.INSTRUCTION_ID AND idv_isauth.INSTRUCTION_DATA_ID = 45)

	-- Org
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_org ON (i.INSTRUCTION_ID = idv_org.INSTRUCTION_ID AND idv_org.INSTRUCTION_DATA_ID = 9)
	LEFT JOIN ORGANISATION org ON (idv_org.INSTRUCTION_NUM_VALUE = org.ORGANISATION_ID)

	-- Company
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_cmp ON (i.INSTRUCTION_ID = idv_cmp.INSTRUCTION_ID AND idv_cmp.INSTRUCTION_DATA_ID = 50)
	LEFT JOIN REF_COMPANY comp ON (idv_cmp.INSTRUCTION_NUM_VALUE = comp.COMPANY_ID)

	-- Client Aurora Map
	LEFT JOIN CLIENT_AURORA_MAP clMap ON (clMap.ORGANISATION_ID = org.ORGANISATION_ID AND comp.COMPANY_ID = clMap.COMPANY_ID)

	-- Account
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_acc ON (i.INSTRUCTION_ID = idv_acc.INSTRUCTION_ID AND idv_acc.INSTRUCTION_DATA_ID = 1)
	LEFT JOIN ACCOUNT acc ON (idv_acc.INSTRUCTION_NUM_VALUE = acc.ACCOUNT_ID)

	-- Account's owning Org
  /*
	LEFT JOIN (
	  SELECT org.*, orgr.ELEMENT_ID2 AS ACCOUNT_ID FROM ORGANISATION org INNER JOIN (
		SELECT r.ELEMENT_ID1, r.ELEMENT_ID2 FROM RELATIONS r
		WHERE r.RELATION_NAME_ID = 20
	  ) orgr ON (org.ORGANISATION_ID = orgr.ELEMENT_ID1)
	) acc_org ON (acc_org.ACCOUNT_ID = acc.ACCOUNT_ID)
  
	-- Client Aurora Map (via Account data)
	
  LEFT JOIN CLIENT_AURORA_MAP acc_clMap ON (clMap.ORGANISATION_ID = acc_org.ORGANISATION_ID AND idv_cmp.INSTRUCTION_NUM_VALUE = clMap.COMPANY_ID)
  */

	-- Withdrawal Bank Account
	LEFT JOIN (
	  SELECT wba.*, wbar.ELEMENT_ID1 AS ACCOUNT_ID FROM BANK_ACCOUNT wba INNER JOIN (
		SELECT r.ELEMENT_ID1, r.ELEMENT_ID2 FROM RELATIONS r
		INNER JOIN RELATION_PROPERTY_APPLIED rpa ON (r.RELATION_ID = rpa.RELATION_ID)
		INNER JOIN REF_RELATION_PROPERTY rrp ON (rpa.RELATION_PROPERTY_ID = rrp.RELATION_PROPERTY_ID)
		WHERE r.RELATION_NAME_ID = 120 AND rrp.PROPERTY_ID = 1
	  ) wbar ON (wba.BANK_ACCOUNT_ID = wbar.ELEMENT_ID2)
	) wba ON (wba.ACCOUNT_ID = acc.ACCOUNT_ID)

	-- Income Bank Account
	LEFT JOIN (
	  SELECT iba.*, ibar.ELEMENT_ID1 AS ACCOUNT_ID FROM BANK_ACCOUNT iba INNER JOIN (
		SELECT r.ELEMENT_ID1, r.ELEMENT_ID2 FROM RELATIONS r
		INNER JOIN RELATION_PROPERTY_APPLIED rpa ON (r.RELATION_ID = rpa.RELATION_ID)
		INNER JOIN REF_RELATION_PROPERTY rrp ON (rpa.RELATION_PROPERTY_ID = rrp.RELATION_PROPERTY_ID)
		WHERE r.RELATION_NAME_ID = 121 AND rrp.PROPERTY_ID = 1
	  ) ibar ON (iba.BANK_ACCOUNT_ID = ibar.ELEMENT_ID2)
	) iba ON (iba.ACCOUNT_ID = acc.ACCOUNT_ID)

	-- Person
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_per ON (i.INSTRUCTION_ID = idv_per.INSTRUCTION_ID AND idv_per.INSTRUCTION_DATA_ID = 10)
	LEFT JOIN PERSON per ON (idv_per.INSTRUCTION_NUM_VALUE = per.PERSON_ID)

	WHERE rit.is_static_data_update = 1 
	AND (
		(i.INSTRUCTION_STATUS_ID IN (27,28,30,31,33))
	)

	ORDER BY PRIORITY DESC, SPP_BATCH_REF, DECODE(
         rit.INSTRUCTION_TYPE_NAME,
         'CREATE_CORR', 1,
         'UPDATE_CORR', 2,
         'CREATE_CLIENT', 3,
         'UPDATE_CLIENT', 4,
         'CREATE_ACCOUNT', 5,
         'UPDATE_ACCOUNT', 6,
         7)</td>
	<td></td>
</tr>
<tr>w
	<td>qCommProc_GetSDUInstruction</td>
	<td>SELECT i.INSTRUCTION_ID, rit.INSTRUCTION_TYPE_NAME, 
	i.INSTRUCTION_STATUS_ID,
	ris.INSTRUCTION_STATUS_NAME,
	i.PROCESS_DATE, i.DATE_ADDED,
	cg.UCM_BATCH_REF,
	cg.SPP_BATCH_REF,
	idv_isauth.INSTRUCTION_NUM_VALUE AS IS_AUTHORISED,
	idv_errmsg.INSTRUCTION_STRING_VALUE AS ERROR_MESSAGE,
  idv_rejmsg.INSTRUCTION_STRING_VALUE AS REJECT_MESSAGE,
	comp.COMPANY_CODE,
	DECODE(CLIENT_NUMBER_PADDING,
      NULL, NULL,
      6, TRIM(TO_CHAR(clMap.CLIENT_NUMBER, '000000')),
      5, TRIM(TO_CHAR(clMap.CLIENT_NUMBER, '00000'))) AS CLIENT_NUMBER,
	org.ORGANISATION_ID,
	org.ORGANISATION_NAME,
	acc.ACCOUNT_ID,
	acc.SUBTITLE,
	acc.accountnumber,
	ACC.FUND_CODE,
	wba.ACCOUNT_NO AS WITHDRAWAL_ACCOUNT_NO,
	wba.SORT_CODE AS WITHDRAWAL_SORT_CODE,
	iba.ACCOUNT_NO AS INCOME_ACCOUNT_NO,
	iba.SORT_CODE AS INCOME_SORT_CODE,
	per.FULL_NAME AS CORR_FULL_NAME,
	per.PERSON_ID AS PERSON_ID,
	idv_comment.INSTRUCTION_STRING_VALUE AS INSTRUCTION_COMMENTS
	FROM INSTRUCTION i

	LEFT JOIN INSTRUCTION_LOCK il ON (i.INSTRUCTION_ID = il.INSTRUCTION_ID)
	
	INNER JOIN COMM com ON (i.COMM_ID = com.COMM_ID)
	INNER JOIN COMM_GROUP cg ON (com.COMM_GROUP_ID = cg.COMM_GROUP_ID)
  
	
	INNER JOIN REF_INSTRUCTION_TYPE rit ON (i.INSTRUCTION_TYPE_ID = rit.INSTRUCTION_TYPE_ID)
	INNER JOIN REF_INSTRUCTION_STATUS ris ON (i.INSTRUCTION_STATUS_ID = ris.INSTRUCTION_STATUS_ID)

	-- ERROR_MESSAGE
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_errmsg ON (i.INSTRUCTION_ID = idv_errmsg.INSTRUCTION_ID AND idv_errmsg.INSTRUCTION_DATA_ID = 49)

	-- ERROR_MESSAGE
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_rejmsg ON (i.INSTRUCTION_ID = idv_rejmsg.INSTRUCTION_ID AND idv_rejmsg.INSTRUCTION_DATA_ID = 48)

	-- INSTRUCTION_COMMENTS
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_comment ON (i.INSTRUCTION_ID = idv_comment.INSTRUCTION_ID AND idv_comment.INSTRUCTION_DATA_ID = 18)

	-- IS_AUTHORISED
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_isauth ON (i.INSTRUCTION_ID = idv_isauth.INSTRUCTION_ID AND idv_isauth.INSTRUCTION_DATA_ID = 45)

	-- Org
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_org ON (i.INSTRUCTION_ID = idv_org.INSTRUCTION_ID AND idv_org.INSTRUCTION_DATA_ID = 9)
	LEFT JOIN ORGANISATION org ON (idv_org.INSTRUCTION_NUM_VALUE = org.ORGANISATION_ID)

	-- Company
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_cmp ON (i.INSTRUCTION_ID = idv_cmp.INSTRUCTION_ID AND idv_cmp.INSTRUCTION_DATA_ID = 50)
	LEFT JOIN REF_COMPANY comp ON (idv_cmp.INSTRUCTION_NUM_VALUE = comp.COMPANY_ID)

	-- Client Aurora Map
	LEFT JOIN CLIENT_AURORA_MAP clMap ON (clMap.ORGANISATION_ID = org.ORGANISATION_ID AND comp.COMPANY_ID = clMap.COMPANY_ID)

	-- Account
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_acc ON (i.INSTRUCTION_ID = idv_acc.INSTRUCTION_ID AND idv_acc.INSTRUCTION_DATA_ID = 1)
	LEFT JOIN ACCOUNT acc ON (idv_acc.INSTRUCTION_NUM_VALUE = acc.ACCOUNT_ID)

	-- Account's owning Org
  /*
	LEFT JOIN (
	  SELECT org.*, orgr.ELEMENT_ID2 AS ACCOUNT_ID FROM ORGANISATION org INNER JOIN (
		SELECT r.ELEMENT_ID1, r.ELEMENT_ID2 FROM RELATIONS r
		WHERE r.RELATION_NAME_ID = 20
	  ) orgr ON (org.ORGANISATION_ID = orgr.ELEMENT_ID1)
	) acc_org ON (acc_org.ACCOUNT_ID = acc.ACCOUNT_ID)
  
	-- Client Aurora Map (via Account data)
	
  LEFT JOIN CLIENT_AURORA_MAP acc_clMap ON (clMap.ORGANISATION_ID = acc_org.ORGANISATION_ID AND idv_cmp.INSTRUCTION_NUM_VALUE = clMap.COMPANY_ID)
  */

	-- Withdrawal Bank Account
	LEFT JOIN (
	  SELECT wba.*, wbar.ELEMENT_ID1 AS ACCOUNT_ID FROM BANK_ACCOUNT wba INNER JOIN (
		SELECT r.ELEMENT_ID1, r.ELEMENT_ID2 FROM RELATIONS r
		INNER JOIN RELATION_PROPERTY_APPLIED rpa ON (r.RELATION_ID = rpa.RELATION_ID)
		INNER JOIN REF_RELATION_PROPERTY rrp ON (rpa.RELATION_PROPERTY_ID = rrp.RELATION_PROPERTY_ID)
		WHERE r.RELATION_NAME_ID = 120 AND rrp.PROPERTY_ID = 1
	  ) wbar ON (wba.BANK_ACCOUNT_ID = wbar.ELEMENT_ID2)
	) wba ON (wba.ACCOUNT_ID = acc.ACCOUNT_ID)

	-- Income Bank Account
	LEFT JOIN (
	  SELECT iba.*, ibar.ELEMENT_ID1 AS ACCOUNT_ID FROM BANK_ACCOUNT iba INNER JOIN (
		SELECT r.ELEMENT_ID1, r.ELEMENT_ID2 FROM RELATIONS r
		INNER JOIN RELATION_PROPERTY_APPLIED rpa ON (r.RELATION_ID = rpa.RELATION_ID)
		INNER JOIN REF_RELATION_PROPERTY rrp ON (rpa.RELATION_PROPERTY_ID = rrp.RELATION_PROPERTY_ID)
		WHERE r.RELATION_NAME_ID = 121 AND rrp.PROPERTY_ID = 1
	  ) ibar ON (iba.BANK_ACCOUNT_ID = ibar.ELEMENT_ID2)
	) iba ON (iba.ACCOUNT_ID = acc.ACCOUNT_ID)

	-- Person
	LEFT JOIN V_INSTRUCTION_DATA_VALUE idv_per ON (i.INSTRUCTION_ID = idv_per.INSTRUCTION_ID AND idv_per.INSTRUCTION_DATA_ID = 10)
	LEFT JOIN PERSON per ON (idv_per.INSTRUCTION_NUM_VALUE = per.PERSON_ID)

	WHERE rit.is_static_data_update = 1 
	AND i.INSTRUCTION_ID = ?
  </td>
	<td>INSTRUCTION_ID int</td>
</tr>
<tr>
	<td>qCommProc_GetInvoicesWithMissingOrgAccountCode</td>
	<td>SELECT * FROM (
		  SELECT r.dDocName, r.dID, r.dInDate, dm.xDocumentClass, dm.xClientNumber, dm.xOrgAccountCode
		  FROM DOCMETA DM 
		  INNER JOIN REVISIONS R ON (R.DID = DM.DID AND r.dRevRank = 0) 
		  WHERE DM.XDOCUMENTCLASS IN ('INV','INVHIST','MULTIINV')
		  AND dm.xClientNumber IS NOT NULL AND dm.xOrgAccountCode IS NULL
		  AND r.dRevRank = 0 and r.dStatus = 'RELEASED'
		  ORDER BY dInDate ASC
		) WHERE ROWNUM <= ?</td>
	<td>maxRows int</td>
</tr>
<tr>
	<td>qCommProc_GetInstructionProcessAppliedByProcessIdAndModuleId</td>
	<td>SELECT ipa.* FROM INSTRUCTION_PROCESS_APPLIED ipa 
		INNER JOIN INSTRUCTION_LOCK il ON (ipa.INSTRUCTION_ID = il.INSTRUCTION_ID)
		WHERE ipa.INSTRUCTION_PROCESS_ID = ?
		AND ipa.PROCESS_END_DATE IS NULL
		AND il.MODULE_ID = ?
	</td>
	<td>INSTRUCTION_PROCESS_ID int
		MODULE_ID int</td>
</tr>
<tr>
	<td>qCommProc_GetAllCDBUsers</td>
	<td>SELECT * FROM USERS ORDER BY DNAME ASC</td>
	<td></td>
</tr>
<tr>
	<td>qCommProc_DeleteCDBUser</td>
	<td>DELETE FROM USERS WHERE DNAME = ?</td>
	<td>DNAME varchar</td>
</tr>
<tr>
	<td>qCommProc_AddCDBUser</td>
	<td>INSERT INTO USERS (DNAME) VALUES (?)</td>
	<td>DNAME varchar</td>
</tr>
<tr>
	<td>qCommProc_GetCDBUser</td>
	<td>SELECT * FROM USERS WHERE DNAME=?</td>
	<td>DNAME varchar</td>
</tr>
<tr>
	<td>qCommProc_GetAuroraClientLinksByStatementMonths</td>
	<td>SELECT * FROM CLIENT_AURORA_MAP
		WHERE COMPANY_ID = ?
		AND STATEMENTS_MONTH_1 = ?
		AND STATEMENTS_MONTH_2 = ?
		AND STATEMENTS_MONTH_3 = ?
		AND STATEMENTS_MONTH_4 = ?
		ORDER BY CLIENT_NUMBER</td>
	<td>COMPANY_ID int
		STATEMENTS_MONTH_1 int
		STATEMENTS_MONTH_2 int
		STATEMENTS_MONTH_3 int
		STATEMENTS_MONTH_4 int</td>
</tr>
</table>
<@end@>
</body></html>