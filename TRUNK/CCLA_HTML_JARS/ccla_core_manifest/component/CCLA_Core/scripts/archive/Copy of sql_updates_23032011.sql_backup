/*
Created: 01/11/2010
Modified: 24/03/2011
Project: CCLA 
Model: Central Database
Company: Kainos Software
Author: Donna Hull
Version: 4.3
Database: Oracle 11g Release 1
*/

-- Create tables section -------------------------------------------------

-- Table INSTRUCTION_ROUTING_MODULE

CREATE TABLE INSTRUCTION_ROUTING_MODULE(
  MODULE_ID Number(15,0) CONSTRAINT CRMODULE_MODULEID_NN NOT NULL,
  MODULE_NAME Varchar2(50 ) CONSTRAINT CRMODULE_MODULENAME_NN NOT NULL,
  LISTEN_STATUS_ID Number(15,0),
  SKIP_STATUS_ID Number(15,0),
  ENTRY_STATUS_ID Number(15,0),
  PASS_STATUS_ID Number(15,0),
  FAIL_STATUS_ID Number(15,0),
  IS_ENABLED Number(1,0) CONSTRAINT CRMODULE_ISENABLED_NN NOT NULL,
  HANDLER_CLASS Varchar2(120 ),
  LAST_UPDATED Timestamp(6)
)
/

-- Add keys for table INSTRUCTION_ROUTING_MODULE

ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT CRMODULE_PK PRIMARY KEY (MODULE_ID)
/

ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT MODULE_NAME_UQ UNIQUE (MODULE_NAME)
/

ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT IRMODULE_LISTENSTATUS_UQ UNIQUE (LISTEN_STATUS_ID)
/

-- Table and Columns comments section
  
COMMENT ON TABLE INSTRUCTION_ROUTING_MODULE IS 'Instruction Routing Module.

Each entry in this table stores the configuration for an individual routing module used by the instruction processing engine.

All modules are expected to have a HANDLER_CLASS set - this is a Java class references which defines what the module will do with accepted Instructions.

All the Status ID columns must be set but it is at the discretion of the Handler Class over which ones are actually applied and when.'
/
COMMENT ON COLUMN INSTRUCTION_ROUTING_MODULE.LISTEN_STATUS_ID IS 'Status value of communications which will be picked up by this module.'
/
COMMENT ON COLUMN INSTRUCTION_ROUTING_MODULE.SKIP_STATUS_ID IS 'Status value assigned by default to Communications which do not match to any of the acceptance rules for the module.'
/
COMMENT ON COLUMN INSTRUCTION_ROUTING_MODULE.ENTRY_STATUS_ID IS 'Status value assigned by default to accepted Communications, i.e. those that pass at least 1 accept rule for the module.'
/
COMMENT ON COLUMN INSTRUCTION_ROUTING_MODULE.PASS_STATUS_ID IS 'Status value assigned to communications which pass at least 1 module checking rule'
/
COMMENT ON COLUMN INSTRUCTION_ROUTING_MODULE.FAIL_STATUS_ID IS 'Status value assigned to communications which don''t pass any of the module checking rules'
/
COMMENT ON COLUMN INSTRUCTION_ROUTING_MODULE.HANDLER_CLASS IS 'Java class reference'
/

-- Table INSTRUCTION_RULE

CREATE TABLE INSTRUCTION_RULE(
  INSTRUCTION_RULE_ID Number(15,0) CONSTRAINT INSTRRULE_ID_NN NOT NULL,
  RULE_NAME Varchar2(60 ) CONSTRAINT INSTRRULE_RULENAME_NN NOT NULL,
  ADDED_BY Varchar2(90 ) CONSTRAINT INSTRRULE_ADDEDBY_NN NOT NULL,
  DATE_ADDED Timestamp(6) CONSTRAINT INSTRRULE_DATEADDED_NN NOT NULL
)
/

-- Add keys for table INSTRUCTION_RULE

ALTER TABLE INSTRUCTION_RULE ADD CONSTRAINT INSTRRULE_PK PRIMARY KEY (INSTRUCTION_RULE_ID)
/

ALTER TABLE INSTRUCTION_RULE ADD CONSTRAINT INSTRRULE_NAME_UQ UNIQUE (RULE_NAME)
/

-- Table and Columns comments section
  
COMMENT ON TABLE INSTRUCTION_RULE IS 'Each entry is essentially a named grouping for a set of COMM_CONDITION entries.'
/
COMMENT ON COLUMN INSTRUCTION_RULE.RULE_NAME IS 'Name of the rule (unique)'
/
COMMENT ON COLUMN INSTRUCTION_RULE.ADDED_BY IS 'User who created the rule initially'
/

-- Table IRMODULE_INSTR_RULE_APPLIED

CREATE TABLE IRMODULE_INSTR_RULE_APPLIED(
  IRMODULE_INSTR_RULE_ID Number(15,0) CONSTRAINT IRMODULE_INSTRRULEAPPL_NN NOT NULL,
  MODULE_ID Number(15,0) CONSTRAINT CRMODULECOMMRULEAPPL_MODULE_NN NOT NULL,
  INSTRUCTION_RULE_ID Number(15,0) CONSTRAINT CRMODULECOMMRULEAPPL_COMMRU_NN NOT NULL,
  MODULE_RULE_TYPE Varchar2(30 ) CONSTRAINT IRMODULEINSTRRULEAPPL_TYPE_NN NOT NULL,
  DATE_ADDED Timestamp(6) CONSTRAINT CRMODULECOMMRULEAPPL_DATEAD_NN NOT NULL
)
/

-- Add keys for table IRMODULE_INSTR_RULE_APPLIED

ALTER TABLE IRMODULE_INSTR_RULE_APPLIED ADD CONSTRAINT INSTRRULEAPPL_PK PRIMARY KEY (IRMODULE_INSTR_RULE_ID)
/

ALTER TABLE IRMODULE_INSTR_RULE_APPLIED ADD CONSTRAINT INSTRRULEAPPL_UQ UNIQUE (MODULE_ID,INSTRUCTION_RULE_ID,MODULE_RULE_TYPE)
/

-- Table and Columns comments section
  
COMMENT ON TABLE IRMODULE_INSTR_RULE_APPLIED IS 'Many-to-many mapping between Instruction Routing Modules and Instruction Rules.'
/
COMMENT ON COLUMN IRMODULE_INSTR_RULE_APPLIED.IRMODULE_INSTR_RULE_ID IS 'Referenced instruction rule'
/
COMMENT ON COLUMN IRMODULE_INSTR_RULE_APPLIED.MODULE_RULE_TYPE IS 'The type of module-rule mapping.

Currently one of two values:
''Accept'' - this is an acceptance rule for the module. Communication items must pass at least 1 of these to enter the module.
''Check'' - this is a check rule for the module. Communications must pass at least 1 of these to ''pass'' the module checks.'
/

-- Table INSTR_RULE_CONDITION_APPLIED

CREATE TABLE INSTR_RULE_CONDITION_APPLIED(
  INSTRUCTION_RULE_ID Number(15,0) CONSTRAINT COMMRULECONAPPL_COMMRULEID_NN NOT NULL
  INSTRUCTION_CONDITION_ID Number(15,0),
  USER_ID Varchar2(90 ) CONSTRAINT COMMRULECONAPPL_USERID_NN NOT NULL,
  DATE_ADDED Timestamp(6) CONSTRAINT COMMRULECONAPPL_DATEADDED_NN NOT NULL,
  LAST_UPDATED Timestamp(6)
)
/

-- Add keys for table INSTR_RULE_CONDITION_APPLIED

ALTER TABLE INSTR_RULE_CONDITION_APPLIED ADD CONSTRAINT COMMRULECONDITIONAPPL_PK PRIMARY KEY (COMM_RULE_CONDITION_ID)
/

-- Table and Columns comments section
  
COMMENT ON TABLE INSTR_RULE_CONDITION_APPLIED IS 'Maps instruction rules to conditions'
/

-- Table INSTRUCTION_CONDITION

CREATE TABLE INSTRUCTION_CONDITION(
  INSTRUCTION_CONDITION_ID Number(15,0) CONSTRAINT INSTRCOND_ID_NN NOT NULL,
  INSTRUCTION_DATA_ID Number(15,0),
  OPERATOR_ID Number(15,0) CONSTRAINT INSTRCOND_OPID_NN NOT NULL,
  CHECK_VALUE Varchar2(50 ),
  CHECK_INSTRUCTION_DATA_ID Number(15,0),
  CONSTRAINT INSTRCOND_VAL_CHK CHECK (NOT (CHECK_VALUE IS NOT NULL AND CHECK_INSTRUCTION_DATA_ID IS NOT NULL))
)
/

-- Add keys for table INSTRUCTION_CONDITION

ALTER TABLE INSTRUCTION_CONDITION ADD CONSTRAINT INSTR_CONDITION_PK PRIMARY KEY (INSTRUCTION_CONDITION_ID)
/

-- Table and Columns comments section
  
COMMENT ON TABLE INSTRUCTION_CONDITION IS 'Each entry models a single instruction condition i.e. FieldX = Y.'
/
COMMENT ON COLUMN INSTRUCTION_CONDITION.CHECK_VALUE IS 'The value to compare against.'
/
COMMENT ON COLUMN INSTRUCTION_CONDITION.CHECK_INSTRUCTION_DATA_ID IS 'This is used when a particular Instruction field must be used as the comparison value against another.'
/

-- Table REF_INSTRUCTION_CONDITION_OP

CREATE TABLE REF_INSTRUCTION_CONDITION_OP(
  OPERATOR_ID Number(15,0) CONSTRAINT INSTRCONOPERATOR_ID_NN NOT NULL,
  OPERATOR_NAME Varchar2(30 ) CONSTRAINT INSTRCONDOP_OPERATORNAM_NN NOT NULL,
  OPERATOR_SYMBOL Varchar2(5 ) CONSTRAINT INSTRCONDOP_SYMBOL_NN NOT NULL
)
/

-- Add keys for table REF_INSTRUCTION_CONDITION_OP

ALTER TABLE REF_INSTRUCTION_CONDITION_OP ADD CONSTRAINT INSTRCONDOP_PK PRIMARY KEY (OPERATOR_ID)
/

-- Table and Columns comments section
  
COMMENT ON TABLE REF_INSTRUCTION_CONDITION_OP IS 'Available binary condition operators, e.g. Equals, Not Equals, Greater than'
/
COMMENT ON COLUMN REF_INSTRUCTION_CONDITION_OP.OPERATOR_SYMBOL IS 'The mathematical symbol used to represent this operator, i.e. =, <, >'
/

-- Table INSTR_VERIFICATION_AUDIT

CREATE TABLE INSTR_VERIFICATION_AUDIT(
  INSTR_VERIFICATION_AUDIT_ID Number(25,0) CONSTRAINT INSTRVERAUDIT_ID_NN NOT NULL,
  INSTRUCTION_RULE_ID Number(15,0),
  OUTCOME Number(1,0) CONSTRAINT INSTRVERAUDIT_OUTCOME_NN NOT NULL,
  EVAL_DATE Timestamp(6) CONSTRAINT INSTRVERAUDIT_EVALDATE_NN NOT NULL,
  MODULE_ID Number(15,0)
)
/

-- Add keys for table INSTR_VERIFICATION_AUDIT

ALTER TABLE INSTR_VERIFICATION_AUDIT ADD CONSTRAINT COMMVERAUDIT_PK PRIMARY KEY (INSTR_VERIFICATION_AUDIT_ID)
/

-- Table and Columns comments section
  
COMMENT ON TABLE INSTR_VERIFICATION_AUDIT IS 'Audit log which will track the outcome of each rule evaluated for each communication in the Verification Module.

There will be multiple entries for the same communication/rule pair if the communication is re-evaluated by the Verification Module.'
/
COMMENT ON COLUMN INSTR_VERIFICATION_AUDIT.OUTCOME IS '1 = True/Pass, 0 = False/Fail'
/

-- Create relationships section ------------------------------------------------- 

CREATE INDEX IRMODULE_APPL_IX ON IRMODULE_INSTR_RULE_APPLIED (MODULE_ID) 
/
ALTER TABLE IRMODULE_INSTR_RULE_APPLIED ADD CONSTRAINT IRMODULE_APPL_FK FOREIGN KEY (MODULE_ID) REFERENCES INSTRUCTION_ROUTING_MODULE (MODULE_ID)
/

CREATE INDEX INSTRRULE_APPL_IX ON IRMODULE_INSTR_RULE_APPLIED (INSTRUCTION_RULE_ID) 
/
ALTER TABLE IRMODULE_INSTR_RULE_APPLIED ADD CONSTRAINT INSTRRULE_APPL_FK FOREIGN KEY (INSTRUCTION_RULE_ID) REFERENCES INSTRUCTION_RULE (INSTRUCTION_RULE_ID)
/

CREATE INDEX INSTRRULE_IRCONDAPPL_IX ON INSTR_RULE_CONDITION_APPLIED (INSTRUCTION_RULE_ID) 
/
ALTER TABLE INSTR_RULE_CONDITION_APPLIED ADD CONSTRAINT INSTRRULE_IRCONDAPPL_FK FOREIGN KEY (INSTRUCTION_RULE_ID) REFERENCES INSTRUCTION_RULE (INSTRUCTION_RULE_ID)
/

CREATE INDEX INSTRCONDITION_OP_IX ON INSTRUCTION_CONDITION (OPERATOR_ID) 
/
ALTER TABLE INSTRUCTION_CONDITION ADD CONSTRAINT INSTRCONDOP_COND_FK FOREIGN KEY (OPERATOR_ID) REFERENCES REF_INSTRUCTION_CONDITION_OP (OPERATOR_ID)
/

CREATE INDEX IRCOND_INSTRCONDAPPL_IX ON INSTR_RULE_CONDITION_APPLIED (INSTRUCTION_CONDITION_ID) 
/
ALTER TABLE INSTR_RULE_CONDITION_APPLIED ADD CONSTRAINT IRCOND_INSTRCONDAPPL_FK FOREIGN KEY (INSTRUCTION_CONDITION_ID) REFERENCES INSTRUCTION_CONDITION (INSTRUCTION_CONDITION_ID)
/

CREATE INDEX INSTRRULE_INSTRVERAUDIT_IX ON INSTR_VERIFICATION_AUDIT (INSTRUCTION_RULE_ID) 
/
ALTER TABLE INSTR_VERIFICATION_AUDIT ADD CONSTRAINT INSTRRULE_INSTRVERAUDIT_FK FOREIGN KEY (INSTRUCTION_RULE_ID) REFERENCES INSTRUCTION_RULE (INSTRUCTION_RULE_ID)
/

CREATE INDEX INSTRSTATUS_LISTENSTATUS_IX ON INSTRUCTION_ROUTING_MODULE (LISTEN_STATUS_ID) 
/
ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT INSTRSTATUS_LISTENSTATUS_FK FOREIGN KEY (LISTEN_STATUS_ID) REFERENCES REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID)
/

CREATE INDEX INSTRSTATUS_SKIPSTATUS_IX ON INSTRUCTION_ROUTING_MODULE (SKIP_STATUS_ID) 
/
ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT INSTRSTATUS_SKIPSTATUS_FK FOREIGN KEY (SKIP_STATUS_ID) REFERENCES REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID)
/

CREATE INDEX INSTRSTATUS_ENTRYSTATUS_IX ON INSTRUCTION_ROUTING_MODULE (ENTRY_STATUS_ID) 
/
ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT INSTRSTATUS_ENTRYSTATUS_FK FOREIGN KEY (ENTRY_STATUS_ID) REFERENCES REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID)
/

CREATE INDEX INSTRSTATUS_PASSSTATUS_IX ON INSTRUCTION_ROUTING_MODULE (PASS_STATUS_ID) 
/
ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT INSTRSTATUS_PASSSTATUS_FK FOREIGN KEY (PASS_STATUS_ID) REFERENCES REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID)
/

CREATE INDEX INSTRSTATUS_FAILSTATUS_IX ON INSTRUCTION_ROUTING_MODULE (FAIL_STATUS_ID) 
/
ALTER TABLE INSTRUCTION_ROUTING_MODULE ADD CONSTRAINT INSTRSTATUS_FAILSTATUS_FK FOREIGN KEY (FAIL_STATUS_ID) REFERENCES REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID)
/

CREATE INDEX IRMODULE_INSTRVERAUDIT_IX ON INSTR_VERIFICATION_AUDIT (MODULE_ID) 
/
ALTER TABLE INSTR_VERIFICATION_AUDIT ADD CONSTRAINT IRMODULE_INSTRVERAUDIT_FK FOREIGN KEY (MODULE_ID) REFERENCES INSTRUCTION_ROUTING_MODULE (MODULE_ID)
/

CREATE INDEX INSTRDATA_INSTRCOND_DATA_IX ON INSTRUCTION_CONDITION (INSTRUCTION_DATA_ID) 
/
ALTER TABLE INSTRUCTION_CONDITION ADD CONSTRAINT INSTRDATA_INSTRCOND_DATA_FK FOREIGN KEY (INSTRUCTION_DATA_ID) REFERENCES REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID)
/

CREATE INDEX INSTRDATA_INSTRCOND_CHKDATA_IX ON INSTRUCTION_CONDITION (CHECK_INSTRUCTION_DATA_ID) 
/
ALTER TABLE INSTRUCTION_CONDITION ADD CONSTRAINT INSTRDATA_INSTRCOND_CHKDATA_FK FOREIGN KEY (CHECK_INSTRUCTION_DATA_ID) REFERENCES REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID)
/

-- Synonyms (run as SYS)

CREATE OR REPLACE PUBLIC SYNONYM INSTRUCTION_ROUTING_MODULE FOR CCLA.INSTRUCTION_ROUTING_MODULE;
CREATE OR REPLACE PUBLIC SYNONYM INSTRUCTION_RULE FOR CCLA.INSTRUCTION_RULE;
CREATE OR REPLACE PUBLIC SYNONYM IRMODULE_INSTR_RULE_APPLIED FOR CCLA.IRMODULE_INSTR_RULE_APPLIED;
CREATE OR REPLACE PUBLIC SYNONYM INSTR_RULE_CONDITION_APPLIED FOR CCLA.INSTR_RULE_CONDITION_APPLIED;
CREATE OR REPLACE PUBLIC SYNONYM INSTRUCTION_CONDITION FOR CCLA.INSTRUCTION_CONDITION;
CREATE OR REPLACE PUBLIC SYNONYM REF_INSTRUCTION_CONDITION_OP FOR CCLA.REF_INSTRUCTION_CONDITION_OP;
CREATE OR REPLACE PUBLIC SYNONYM INSTR_VERIFICATION_AUDIT FOR CCLA.INSTR_VERIFICATION_AUDIT;

-- Grants (run as SYS)

GRANT ALL ON INSTRUCTION_ROUTING_MODULE TO UCMADMIN;
GRANT ALL ON INSTRUCTION_RULE TO UCMADMIN;
GRANT ALL ON IRMODULE_INSTR_RULE_APPLIED TO UCMADMIN;
GRANT ALL ON INSTR_RULE_CONDITION_APPLIED TO UCMADMIN;
GRANT ALL ON INSTRUCTION_CONDITION TO UCMADMIN;
GRANT ALL ON REF_INSTRUCTION_CONDITION_OP TO UCMADMIN;
GRANT ALL ON INSTR_VERIFICATION_AUDIT TO UCMADMIN;

-- Data Load (Operators)

REM INSERTING into REF_INSTRUCTION_CONDITION_OP
Insert into REF_INSTRUCTION_CONDITION_OP (OPERATOR_ID,OPERATOR_NAME,OPERATOR_SYMBOL) values (1,'equals','=');
Insert into REF_INSTRUCTION_CONDITION_OP (OPERATOR_ID,OPERATOR_NAME,OPERATOR_SYMBOL) values (2,'does not equal','!=');
Insert into REF_INSTRUCTION_CONDITION_OP (OPERATOR_ID,OPERATOR_NAME,OPERATOR_SYMBOL) values (3,'greater than','>');
Insert into REF_INSTRUCTION_CONDITION_OP (OPERATOR_ID,OPERATOR_NAME,OPERATOR_SYMBOL) values (4,'less than','<');
Insert into REF_INSTRUCTION_CONDITION_OP (OPERATOR_ID,OPERATOR_NAME,OPERATOR_SYMBOL) values (5,'greater than or equal','>=');
Insert into REF_INSTRUCTION_CONDITION_OP (OPERATOR_ID,OPERATOR_NAME,OPERATOR_SYMBOL) values (6,'less than or equal','<=');
