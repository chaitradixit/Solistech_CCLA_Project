-- Table TRANSACTION_BATCH
CREATE TABLE TRANSACTION_BATCH(
  TRANSACTION_BATCH_ID Number(15,0) NOT NULL,
  TRANSACTION_DATE Timestamp(6) NOT NULL,
  DATE_ADDED Timestamp(6) NOT NULL,
  OPENING_BALANCE Float NOT NULL,
  CLOSING_BALANCE Float NOT NULL,
  APPLIED_DATE Timestamp(6),
  COMM_ID Number(15,0),
  USER_ID Varchar2(50 ),
  TRANS_BATCH_STATUS_ID Number(15,0),
  TRANS_BATCH_SEQUENCE Number(15,0),
  FUND_CODE varchar2(2 Char)
)
/
-- Add keys for table TRANSACTION_BATCH
ALTER TABLE TRANSACTION_BATCH ADD CONSTRAINT TRANSBATCH_PK PRIMARY KEY (TRANSACTION_BATCH_ID)
/
-- Table TRANS_BATCH_STATUS
CREATE TABLE REF_TRANS_BATCH_STATUS(
  TRANS_BATCH_STATUS_ID Number(15,0) NOT NULL,
  STATUS_NAME Varchar2(30 ) NOT NULL
)
/

-- Add keys for table TRANS_BATCH_STATUS
ALTER TABLE REF_TRANS_BATCH_STATUS ADD CONSTRAINT TRANSBATCH_STATUS_PK PRIMARY KEY (TRANS_BATCH_STATUS_ID)
/

-- Add foreign Keys to TRANSACTION_BATCH from TRANS_BATCH_STATUS
CREATE INDEX TRANSBATCHSTATUS_TRANSBATCH_IX ON TRANSACTION_BATCH (TRANS_BATCH_STATUS_ID) 
/
ALTER TABLE TRANSACTION_BATCH ADD CONSTRAINT TRANSBATCHSTATUS_TRANSBATCH_FK FOREIGN KEY (TRANS_BATCH_STATUS_ID) REFERENCES REF_TRANS_BATCH_STATUS (TRANS_BATCH_STATUS_ID)
/

-- Add foreign Keys to TRANSACTION_BATCH from USERS
CREATE INDEX USERS_TRANSBATCH_IX ON TRANSACTION_BATCH (USER_ID) 
/
ALTER TABLE TRANSACTION_BATCH ADD CONSTRAINT USERS_TRANSBATCH_FK FOREIGN KEY (USER_ID) REFERENCES USERS (DNAME)
/

-- Add foreign Keys to TRANSACTION_BATCH from COMM
CREATE INDEX COMM_TRANSBATCH_IX ON TRANSACTION_BATCH (COMM_ID) 
/
ALTER TABLE TRANSACTION_BATCH ADD CONSTRAINT COMM_TRANSBATCH_FK FOREIGN KEY (COMM_ID) REFERENCES COMM (COMM_ID)
/

-- Create Sequence for TRANSACTION_BATCH
CREATE SEQUENCE  SEQ_TRANSACTION_BATCH MINVALUE 1 MAXVALUE 999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;
/
-- SYNONYM for Table and Sequence
CREATE OR REPLACE PUBLIC SYNONYM TRANSACTION_BATCH FOR CCLA.TRANSACTION_BATCH;
/
CREATE OR REPLACE PUBLIC SYNONYM REF_TRANS_BATCH_STATUS FOR CCLA.REF_TRANS_BATCH_STATUS;
/
CREATE OR REPLACE PUBLIC SYNONYM SEQ_TRANSACTION_BATCH FOR CCLA.SEQ_TRANSACTION_BATCH;
/
-- Grant Access 
GRANT ALL ON TRANSACTION_BATCH TO UCMADMIN;
/
GRANT ALL ON REF_TRANS_BATCH_STATUS TO UCMADMIN;
/
GRANT ALL ON SEQ_TRANSACTION_BATCH TO UCMADMIN;

-- Insert Transaction Batch Statuses
INSERT INTO REF_TRANS_BATCH_STATUS (TRANS_BATCH_STATUS_ID, STATUS_NAME) VALUES (0,'PENDING');
INSERT INTO REF_TRANS_BATCH_STATUS (TRANS_BATCH_STATUS_ID, STATUS_NAME) VALUES (1,'PROCESSED');
INSERT INTO REF_TRANS_BATCH_STATUS (TRANS_BATCH_STATUS_ID, STATUS_NAME) VALUES (2,'COMPLETED');
INSERT INTO REF_TRANS_BATCH_STATUS (TRANS_BATCH_STATUS_ID, STATUS_NAME) VALUES (3,'ERROR');


Insert into REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (33,'DICONDIN_REF','INT','Dicondin Instruction Reference','The dicondin that this instruction is referencing');

Insert into REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (34,'DICONDIN_MATCHED','BOOL','Dicondin Matched Flag','Flag to indicate whether dicondins is fully matched');

Insert into REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (35,'NARRATIVE','STRING','Narrative','Narrative information on instruction');

Insert into REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (36,'BANK_TRANS_TYPE','STRING','Bank Transaction Type','Type of bank transaction for the instruction');

Insert into REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (37,'TRANSBATCH_REF','INT','Transaction Batch Reference','The transaction batch that this instruction is referencing');

Insert into REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (38,'FUND_CODE','STRING','Fund Code','The fund code for this transaction');

Insert into REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (39,'IAT_ID','INT','IAT ID','The id of the IAT instruction');

Insert into REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (40,'DEST_FUND_CODE','STRING','Destination Fund Code','The destination fund code for this transaction');

Insert into REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (41,'SOURCE_BANK_ACCOUNT_NUMBER','STRING','Source Bank Account Number','The source bank account number for this transaction');

Insert into REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (42,'SOURCE_SORT_CODE','STRING','Source Sort Code','The source sort code for this transaction');

Insert into REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (43,'DEST_BANK_ACCOUNT_NUMBER','STRING','Destination Bank Account Number','The destination bank account number for this transaction');

Insert into REF_INSTRUCTION_DATA (INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
values (44,'DEST_SORT_CODE','STRING','Destination Sort Code','The destination sort code for this transaction');

