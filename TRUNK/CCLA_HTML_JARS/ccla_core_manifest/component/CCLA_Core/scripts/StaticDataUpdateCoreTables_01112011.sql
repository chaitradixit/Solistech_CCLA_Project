/* Table REF_STATIC_DATA_UPDATE */
CREATE TABLE REF_STATIC_DATA_UPDATE(
  SDU_ID Number(10,0) NOT NULL,
  SDU_NAME Varchar2(30 ) NOT NULL,
  CREATE_INSTR_TYPE_ID Number(15,0),
  UPDATE_INSTR_TYPE_ID Number(15,0)
);
/
-- Add keys for table REF_STATIC_DATA_UPDATE
ALTER TABLE REF_STATIC_DATA_UPDATE ADD CONSTRAINT REF_STATIC_DATA_UPDATE_PK PRIMARY KEY (SDU_ID);
/


/* Table STATIC_DATA_UPDATE_APPLIED */
CREATE TABLE STATIC_DATA_UPDATE_APPLIED(
  INSTRUCTION_TYPE_ID Number(15,0) NOT NULL,
  EXECUTION_ORDER Number(10,0) NOT NULL,
  ALLOW_UPDATE Number(1,0),
  ALLOW_CREATE Number(1,0),
  SDU_ID Number(10,0) NOT NULL
);
/
-- Add keys for table STATIC_DATA_UPDATE_APPLIED
ALTER TABLE STATIC_DATA_UPDATE_APPLIED ADD CONSTRAINT STATIC_DATA_UPDATE_PK PRIMARY KEY (INSTRUCTION_TYPE_ID,SDU_ID);
/

/* Foreign Keys and indexes */
CREATE INDEX INSTRTYPE_SDU_CREATE_IX ON REF_STATIC_DATA_UPDATE (CREATE_INSTR_TYPE_ID);
/
ALTER TABLE REF_STATIC_DATA_UPDATE ADD CONSTRAINT INSTRTYPE_SDU_CREATE_FK FOREIGN KEY (CREATE_INSTR_TYPE_ID) REFERENCES REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID);
/
CREATE INDEX INSTRTYPE_SDU_UPDATE_FK ON REF_STATIC_DATA_UPDATE (UPDATE_INSTR_TYPE_ID);
/
ALTER TABLE REF_STATIC_DATA_UPDATE ADD CONSTRAINT INSTRTYPE_SDU_UPDATE_FK FOREIGN KEY (UPDATE_INSTR_TYPE_ID) REFERENCES REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID);
/
CREATE INDEX INSTRTYPE_SDUAPPLIED_IX ON STATIC_DATA_UPDATE_APPLIED (INSTRUCTION_TYPE_ID); 
/
ALTER TABLE STATIC_DATA_UPDATE_APPLIED ADD CONSTRAINT INSTRTYPE_SDUAPPLIED_FK FOREIGN KEY (INSTRUCTION_TYPE_ID) REFERENCES REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID);
/
CREATE INDEX REF_SDU_SDU_APPLIED_IX ON STATIC_DATA_UPDATE_APPLIED (SDU_ID); 
/
ALTER TABLE STATIC_DATA_UPDATE_APPLIED ADD CONSTRAINT REF_SDU_SDU_APPLIED_FK FOREIGN KEY (SDU_ID) REFERENCES REF_STATIC_DATA_UPDATE (SDU_ID);
/

/* Synonyms */
CREATE OR REPLACE PUBLIC SYNONYM REF_STATIC_DATA_UPDATE FOR CCLA.REF_STATIC_DATA_UPDATE;
CREATE OR REPLACE PUBLIC SYNONYM STATIC_DATA_UPDATE_APPLIED FOR CCLA.STATIC_DATA_UPDATE_APPLIED;

/* Grant Access */
GRANT ALL ON REF_STATIC_DATA_UPDATE TO UCMADMIN;
GRANT ALL ON STATIC_DATA_UPDATE_APPLIED TO UCMADMIN;

--------------------------------------------------------------------------------------------------------------
--------------------------------------------------- DATA LOAD ------------------------------------------------
--------------------------------------------------------------------------------------------------------------

-- NEW REF_INSTR_AUDIT_ACTION
INSERT INTO REF_INSTR_AUDIT_ACTION (INSTR_AUDIT_ACTION_ID, INSTR_AUDIT_ACTION_NAME, DESCRIPTION)
VALUES (11, 'SDU Authorised', 'Static Data Update is authorised by SPP');
INSERT INTO REF_INSTR_AUDIT_ACTION (INSTR_AUDIT_ACTION_ID, INSTR_AUDIT_ACTION_NAME, DESCRIPTION)
VALUES (12, 'SDU Not Authorised', 'Static Data Update is not authorised by SPP');
INSERT INTO REF_INSTR_AUDIT_ACTION (INSTR_AUDIT_ACTION_ID, INSTR_AUDIT_ACTION_NAME, DESCRIPTION)
VALUES (13, 'Aurora Create', 'Sent to Aurora for Creation');
INSERT INTO REF_INSTR_AUDIT_ACTION (INSTR_AUDIT_ACTION_ID, INSTR_AUDIT_ACTION_NAME, DESCRIPTION)
VALUES (14, 'Aurora Update', 'Sent to Aurora for Update');

-- MODIFY REF_INSTRUCTION_TYPE
ALTER TABLE REF_INSTRUCTION_TYPE 
ADD IS_STATIC_DATA_UPDATE Number(1,0) DEFAULT 0 NOT NULL; 

-- NEW REF_INSTRUCTION_TYPE
INSERT INTO REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID,INSTRUCTION_TYPE_NAME,TRANSACTION_TYPE_ID,INSTRUCTION_DESCRIPTION,IS_FINANCIAL_TRANSACTION,SUBMIT_TO_SPP,REQUIRE_SIGNATURES,IS_SUPPORTING,DATE_ADDED,LAST_UPDATED,SETTLEMENT_OFFSET,IS_STATIC_DATA_UPDATE) 
VALUES (126,'CREATE_CLIENT',NULL,'Create Client Instruction',0,1,0,0,SYSDATE,SYSDATE,0,1);
INSERT INTO REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID,INSTRUCTION_TYPE_NAME,TRANSACTION_TYPE_ID,INSTRUCTION_DESCRIPTION,IS_FINANCIAL_TRANSACTION,SUBMIT_TO_SPP,REQUIRE_SIGNATURES,IS_SUPPORTING,DATE_ADDED,LAST_UPDATED,SETTLEMENT_OFFSET,IS_STATIC_DATA_UPDATE) 
VALUES (127,'UPDATE_CLIENT',NULL,'Update Client Instruction',0,1,0,0,SYSDATE,SYSDATE,0,1);
INSERT INTO REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID,INSTRUCTION_TYPE_NAME,TRANSACTION_TYPE_ID,INSTRUCTION_DESCRIPTION,IS_FINANCIAL_TRANSACTION,SUBMIT_TO_SPP,REQUIRE_SIGNATURES,IS_SUPPORTING,DATE_ADDED,LAST_UPDATED,SETTLEMENT_OFFSET,IS_STATIC_DATA_UPDATE) 
VALUES (128,'CREATE_CORRESPONDENT',NULL,'Create Correspondwnt Instruction',0,1,0,0,SYSDATE,SYSDATE,0,1);
INSERT INTO REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID,INSTRUCTION_TYPE_NAME,TRANSACTION_TYPE_ID,INSTRUCTION_DESCRIPTION,IS_FINANCIAL_TRANSACTION,SUBMIT_TO_SPP,REQUIRE_SIGNATURES,IS_SUPPORTING,DATE_ADDED,LAST_UPDATED,SETTLEMENT_OFFSET,IS_STATIC_DATA_UPDATE) 
VALUES (129,'UPDATE_CORRESPONDENT',NULL,'Update Correspondent Instruction',0,1,0,0,SYSDATE,SYSDATE,0,1);
INSERT INTO REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID,INSTRUCTION_TYPE_NAME,TRANSACTION_TYPE_ID,INSTRUCTION_DESCRIPTION,IS_FINANCIAL_TRANSACTION,SUBMIT_TO_SPP,REQUIRE_SIGNATURES,IS_SUPPORTING,DATE_ADDED,LAST_UPDATED,SETTLEMENT_OFFSET,IS_STATIC_DATA_UPDATE) 
VALUES (130,'CREATE_ACCOUNT',NULL,'Create Account Instruction',0,1,0,0,SYSDATE,SYSDATE,0,1);
INSERT INTO REF_INSTRUCTION_TYPE (INSTRUCTION_TYPE_ID,INSTRUCTION_TYPE_NAME,TRANSACTION_TYPE_ID,INSTRUCTION_DESCRIPTION,IS_FINANCIAL_TRANSACTION,SUBMIT_TO_SPP,REQUIRE_SIGNATURES,IS_SUPPORTING,DATE_ADDED,LAST_UPDATED,SETTLEMENT_OFFSET,IS_STATIC_DATA_UPDATE) 
VALUES (131,'UPDATE_ACCOUNT',NULL,'Update Account Instruction',0,1,0,0,SYSDATE,SYSDATE,0,1);


INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (45,'IS_AUTHORISED','BOOL','Is Authorised','Is authorised flag value');
INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (46,'AUTH_USER','STRING','Authorised User','The name of the authorised user');
INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (47,'AUTH_DATE','DATE','Authorised Date','The date of when this instruction was authorised');
INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (48,'REJECT_REASON','STRING','Reject Reason','The reason why this instruction was rejected');
INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (49,'ERROR_MESSAGE','STRING','Error Message','The error message');
INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (50,'COMPANY_ID','INT','Company ID','Company ID');
INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (51,'IS_EXEC_SUCCESS','BOOL','Execution Successful','Is Execution Successful Flag');
INSERT INTO REF_INSTRUCTION_DATA 
(INSTRUCTION_DATA_ID,INSTRUCTION_DATA_NAME,INSTRUCTION_DATA_TYPE,INSTRUCTION_DATA_LABEL,INSTRUCTION_DATA_DESCRIPTION) 
VALUES (52,'PARENT_INSTR_REF','INT','Parent Instruction Reference','Parent Instruction Reference ID');

-- UPDATE ALL STATIC DATA UPDATE INSTRUCTIONS WITH PARENT INSTR ID 
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
SELECT SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 52, INSTRUCTION_TYPE_ID, 1
FROM REF_INSTRUCTION_TYPE WHERE IS_STATIC_DATA_UPDATE = 1;


-- UPDATE ALL PREVIOUS INSTRUCTION_TYPE WITH OPTIONAL COMPANY_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
SELECT SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 50, INSTRUCTION_TYPE_ID, 1
FROM REF_INSTRUCTION_TYPE WHERE IS_STATIC_DATA_UPDATE = 0;


-- 1. CREATE_CLIENT
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 45, 126, 1); -- IS_AUTHORISED
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 46, 126, 1); -- AUTH_USER
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 47, 126, 1); -- AUTH_DATE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 48, 126, 1); -- REJECT_REASON
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 49, 126, 1); -- ERROR_MESSAGE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 50, 126, 0); -- COMPANY_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 9, 126, 0); -- ORGANISATION_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 18, 126, 1); -- INSTRUCTION_COMMENTS
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 51, 126, 1); -- IS_EXECUTED

-- 2. UPDATE_CLIENT
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 45, 127, 1); -- IS_AUTHORISED
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 46, 127, 1); -- AUTH_USER
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 47, 127, 1); -- AUTH_DATE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 48, 127, 1); -- REJECT_REASON
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 49, 127, 1); -- ERROR_MESSAGE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 50, 127, 0); -- COMPANY_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 9, 127, 0); -- ORGANISATION_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 18, 127, 1); -- INSTRUCTION_COMMENTS
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 51, 127, 1); -- IS_EXECUTED

-- 3. CREATE_CORRESPONDENT
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 45, 128, 1); -- IS_AUTHORISED
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 46, 128, 1); -- AUTH_USER
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 47, 128, 1); -- AUTH_DATE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 48, 128, 1); -- REJECT_REASON
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 49, 128, 1); -- ERROR_MESSAGE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 50, 128, 0); -- COMPANY_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 10, 128, 0); -- PERSON_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 18, 128, 1); -- INSTRUCTION_COMMENTS
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 51, 128, 1); -- IS_EXECUTED

-- 4. UPDATE_CORRESPONDENT
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 45, 129, 1); -- IS_AUTHORISED
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 46, 129, 1); -- AUTH_USER
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 47, 129, 1); -- AUTH_DATE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 48, 129, 1); -- REJECT_REASON
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 49, 129, 1); -- ERROR_MESSAGE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 50, 129, 0); -- COMPANY_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 10, 129, 0); -- PERSON_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 18, 129, 1); -- INSTRUCTION_COMMENTS
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 51, 129, 1); -- IS_EXECUTED

-- 5. CREATE_ACCOUNT
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 45, 130, 1); -- IS_AUTHORISED
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 46, 130, 1); -- AUTH_USER
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 47, 130, 1); -- AUTH_DATE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 48, 130, 1); -- REJECT_REASON
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 49, 130, 1); -- ERROR_MESSAGE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 1, 130, 0); -- SOURCE_ACCOUNT_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 18, 130, 1); -- INSTRUCTION_COMMENTS
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 50, 130, 0); -- COMPANY_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 51, 130, 1); -- IS_EXECUTED

-- 6. UPDATE_ACCOUNT
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 45, 131, 1); -- IS_AUTHORISED
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 46, 131, 1); -- AUTH_USER
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 47, 131, 1); -- AUTH_DATE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 48, 131, 1); -- REJECT_REASON
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 49, 131, 1); -- ERROR_MESSAGE
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 1, 131, 0); -- SOURCE_ACCOUNT_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 18, 131, 1); -- INSTRUCTION_COMMENTS
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 50, 131, 0); -- COMPANY_ID
INSERT INTO APPLICABLE_INSTRUCTION_DATA (APPLICABLE_INSTRUCTION_DATA_ID, INSTRUCTION_DATA_ID, INSTRUCTION_TYPE_ID, IS_OPTIONAL)
VALUES (SEQ_APPLICABLE_INSTR_DATA.NEXTVAL, 51, 131, 1); -- IS_EXECUTED


-- REF_UCM_METADATA_TRANSLATION (DATA LOAD)
INSERT INTO REF_UCM_METADATA_TRANSLATION (INSTRUCTION_DATA_ID, UCM_FIELD_NAME, TRANSLATION_HANDLER_CLASS) 
VALUES (50, NULL, 'com.ecs.ucm.ccla.commproc.translation.CompanyIdFieldHandler'); -- COMPANY_ID
INSERT INTO REF_UCM_METADATA_TRANSLATION (INSTRUCTION_DATA_ID, UCM_FIELD_NAME, TRANSLATION_HANDLER_CLASS) 
VALUES (10, NULL, 'com.ecs.ucm.ccla.commproc.translation.CorrespondentIdFieldHandler'); -- PERSON_ID


-- REF_INSTRUCTION_STATUS (DATA LOAD)
INSERT INTO REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID,INSTRUCTION_STATUS_NAME,INSTRUCTION_STATUS_DESCRIPTION) 
VALUES (25,'Ready For Static Data Update','Item Ready For Static Data Update');
INSERT INTO REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID,INSTRUCTION_STATUS_NAME,INSTRUCTION_STATUS_DESCRIPTION) 
VALUES (26,'Failed Static Data Update','Item Failed Static Data Update');
INSERT INTO REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID,INSTRUCTION_STATUS_NAME,INSTRUCTION_STATUS_DESCRIPTION) 
VALUES (27,'Ready For Static Data Exec','Item Ready For Static Data Execution');
INSERT INTO REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID,INSTRUCTION_STATUS_NAME,INSTRUCTION_STATUS_DESCRIPTION) 
VALUES (28,'Failed Static Data Exec','Item Failed Static Data Execution');
INSERT INTO REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID,INSTRUCTION_STATUS_NAME,INSTRUCTION_STATUS_DESCRIPTION) 
VALUES (29,'Completed','Item Completed');
INSERT INTO REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID,INSTRUCTION_STATUS_NAME,INSTRUCTION_STATUS_DESCRIPTION) 
VALUES (30,'Pending Static Data Auth','Item Pending Static Data Authorisation');
INSERT INTO REF_INSTRUCTION_STATUS (INSTRUCTION_STATUS_ID,INSTRUCTION_STATUS_NAME,INSTRUCTION_STATUS_DESCRIPTION) 
VALUES (31,'Failed Static Data Auth','Item Failed Static Data Authorisation');

-- INSTRUCTION_ROUTING_MODULE (DATA_LOAD)
UPDATE INSTRUCTION_ROUTING_MODULE SET EXECUTION_ORDER=6 WHERE MODULE_ID=4; -- SPP Release Module moved further down.
UPDATE INSTRUCTION_ROUTING_MODULE SET FAIL_STATUS_ID=25 WHERE MODULE_ID=3; --Archive Module failed status goes to static data update module.

INSERT INTO INSTRUCTION_ROUTING_MODULE (MODULE_ID,MODULE_NAME,LISTEN_STATUS_ID,SKIP_STATUS_ID,ENTRY_STATUS_ID,PASS_STATUS_ID,FAIL_STATUS_ID,IS_ENABLED,HANDLER_CLASS,LAST_UPDATED,EXECUTION_ORDER) 
VALUES (6,'Static Data Update',25,14,NULL,14,26,1,'com.ecs.ucm.ccla.commproc.modulehandler.StaticDataUpdateModuleHandler',SYSDATE,5);
INSERT INTO INSTRUCTION_ROUTING_MODULE (MODULE_ID,MODULE_NAME,LISTEN_STATUS_ID,SKIP_STATUS_ID,ENTRY_STATUS_ID,PASS_STATUS_ID,FAIL_STATUS_ID,IS_ENABLED,HANDLER_CLASS,LAST_UPDATED,EXECUTION_ORDER) 
VALUES (7,'Static Data Execution',27,29,NULL,29,28,1,'com.ecs.ucm.ccla.commproc.modulehandler.StaticDataExecutionModuleHandler',SYSDATE,7);


-- REF_INSTRUCTION_ACTION (DATA_LOAD)
INSERT INTO REF_INSTRUCTION_ACTION (INSTRUCTION_ACTION_ID,INSTRUCTION_ACTION_LABEL) VALUES (7,'Suspend');
    

UPDATE REF_INSTRUCTION_STATUS SET INSTRUCTION_STATUS_NAME = 'Ready for SDU Instr. Gen.', 
INSTRUCTION_STATUS_DESCRIPTION = 'Item ready for Static Data Update instructions to be generated against it'
WHERE INSTRUCTION_STATUS_ID = 25;

UPDATE REF_INSTRUCTION_STATUS SET INSTRUCTION_STATUS_NAME = 'Failed SDU Instr. Gen.', 
INSTRUCTION_STATUS_DESCRIPTION = 'Static Data Update instruction generation failed'
WHERE INSTRUCTION_STATUS_ID = 26;

UPDATE REF_INSTRUCTION_STATUS SET INSTRUCTION_STATUS_NAME = 'Ready for SDU Execution', 
INSTRUCTION_STATUS_DESCRIPTION = 'Static Data Update instruction approved and pending execution'
WHERE INSTRUCTION_STATUS_ID = 27;

UPDATE REF_INSTRUCTION_STATUS SET INSTRUCTION_STATUS_NAME = 'Failed SDU Execution', 
INSTRUCTION_STATUS_DESCRIPTION = 'Static Data Update instruction failed during downstream execution'
WHERE INSTRUCTION_STATUS_ID = 28;

UPDATE REF_INSTRUCTION_STATUS SET INSTRUCTION_STATUS_NAME = 'Pending SDU Authorisation', 
INSTRUCTION_STATUS_DESCRIPTION = 'Static Data Update instruction pending authorisation'
WHERE INSTRUCTION_STATUS_ID = 30;

UPDATE REF_INSTRUCTION_STATUS SET INSTRUCTION_STATUS_NAME = 'Failed SDU Authorisation', 
INSTRUCTION_STATUS_DESCRIPTION = 'Static Data Update instruction rejected'
WHERE INSTRUCTION_STATUS_ID = 31;



-- V_SDU_INSTRUCTION_DATA (VIEW CREATION) 	
CREATE OR REPLACE FORCE VIEW "CCLA"."V_SDU_INSTRUCTION_DATA" 
("INSTRUCTION_ID", "INSTRUCTION_STATUS_ID", 
"INSTRUCTION_TYPE_ID", "COMPANY_ID", 
"SOURCE_ACCOUNT_ID", "PERSON_ID", 
"ORGANISATION_ID", "IS_AUTHORISED", IS_EXECUTION_SUCCESS)
AS
SELECT I.INSTRUCTION_ID, RIS.INSTRUCTION_STATUS_ID,
    MAX(RIT.INSTRUCTION_TYPE_ID) AS INSTRUCTION_TYPE_ID,
    MAX(
    CASE
      WHEN RID.INSTRUCTION_DATA_ID=50
      THEN IDA.INSTRUCTION_NUM_VALUE
      ELSE NULL
    END) AS COMPANY_ID,
    MAX(
    CASE
      WHEN RID.INSTRUCTION_DATA_ID=1
      THEN IDA.INSTRUCTION_NUM_VALUE
      ELSE NULL
    END) AS SOURCE_ACCOUNT_ID,
    MAX(
    CASE
      WHEN RID.INSTRUCTION_DATA_ID=10
      THEN IDA.INSTRUCTION_NUM_VALUE
      ELSE NULL
    END) AS PERSON_ID,
    MAX(
    CASE
      WHEN RID.INSTRUCTION_DATA_ID=9
      THEN IDA.INSTRUCTION_NUM_VALUE
      ELSE NULL
    END) AS ORGANISATION_ID,
    MAX(
    CASE
      WHEN RID.INSTRUCTION_DATA_ID=45
      THEN IDA.INSTRUCTION_NUM_VALUE
      ELSE NULL
    END) AS IS_AUTHORISED,
    MAX(
    CASE
      WHEN RID.INSTRUCTION_DATA_ID=51
      THEN IDA.INSTRUCTION_NUM_VALUE
      ELSE NULL
    END) AS IS_EXECUTION_SUCCESS    
  FROM INSTRUCTION I
  INNER JOIN REF_INSTRUCTION_STATUS RIS 
  ON (I.INSTRUCTION_STATUS_ID = RIS.INSTRUCTION_STATUS_ID)
  INNER JOIN REF_INSTRUCTION_TYPE RIT
  ON (I.INSTRUCTION_TYPE_ID = RIT.INSTRUCTION_TYPE_ID)
  INNER JOIN APPLICABLE_INSTRUCTION_DATA AID
  ON (RIT.INSTRUCTION_TYPE_ID = AID.INSTRUCTION_TYPE_ID)
  INNER JOIN INSTRUCTION_DATA_APPLIED IDA
  ON (AID.APPLICABLE_INSTRUCTION_DATA_ID = IDA.APPLICABLE_INSTRUCTION_DATA_ID
  AND I.INSTRUCTION_ID                   = IDA.INSTRUCTION_ID)
  INNER JOIN REF_INSTRUCTION_DATA RID
  ON (AID.INSTRUCTION_DATA_ID     = RID.INSTRUCTION_DATA_ID)
  WHERE (RIT.IS_STATIC_DATA_UPDATE=1) AND RIS.INSTRUCTION_STATUS_ID NOT IN (7,11,29,32)
  GROUP BY I.INSTRUCTION_ID, RIS.INSTRUCTION_STATUS_ID;
  
  
/* SYNONYM */
CREATE OR REPLACE PUBLIC SYNONYM V_SDU_INSTRUCTION_DATA FOR CCLA.V_SDU_INSTRUCTION_DATA;
/* GRANT */
GRANT ALL ON V_SDU_INSTRUCTION_DATA TO UCMADMIN;
