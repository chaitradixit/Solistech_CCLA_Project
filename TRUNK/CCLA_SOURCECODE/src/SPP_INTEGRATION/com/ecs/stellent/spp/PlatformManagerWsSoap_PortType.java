/**
 * PlatformManagerWsSoap_PortType.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis 1.4 Apr 22, 2006 (06:55:48 PDT) WSDL2Java emitter.
 */

package com.ecs.stellent.spp;

public interface PlatformManagerWsSoap_PortType extends java.rmi.Remote {
    public java.lang.String createNewJob(java.lang.String sessionId, java.lang.String processId, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.PendingActivity takePendingActivity(java.lang.String sessionId, java.lang.String jobId, short EPCount, short nodeId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.PendingActivity takePendingActivity4(java.lang.String sessionId, java.lang.String jobId, short EPCount, short nodeId) throws java.rmi.RemoteException;
    public java.lang.String getSubJobID(java.lang.String sessionId, java.lang.String jobId, short embeddedProcessCount) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.LogonDetails logon(java.lang.String logonName, short logonType, boolean unConditional) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.LogonDetails logonUsingPassword(java.lang.String logonName, java.lang.String logonPassword, short logonType, boolean unConditional) throws java.rmi.RemoteException;
    public java.lang.String createNewJobUsingMapName(java.lang.String sessionId, java.lang.String processName, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createNewCase(java.lang.String sessionId, java.lang.String processId, java.lang.String caseReference, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createNewCaseUsingMapName(java.lang.String sessionId, java.lang.String processName, java.lang.String caseReference, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createJobInCase(java.lang.String sessionId, java.lang.String processId, java.lang.String caseJobId, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createJobInCaseUsingMapName(java.lang.String sessionId, java.lang.String processName, java.lang.String caseJobId, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createJobInCaseUsingRef(java.lang.String sessionId, java.lang.String processId, java.lang.String caseReference, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createJobInCaseUsingRefMapName(java.lang.String sessionId, java.lang.String processName, java.lang.String caseReference, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProgressDetails createNewJobAndProgress(java.lang.String sessionId, java.lang.String processId, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProgressDetails createNewJobAndProgressUsingName(java.lang.String sessionId, java.lang.String processName, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public void logOff(java.lang.String sessionId) throws java.rmi.RemoteException;
    public void activityComplete(java.lang.String sessionId, java.lang.String jobId, com.ecs.stellent.spp.Variable[] outputVariables, short embeddedProcessCount, short nodeId) throws java.rmi.RemoteException;
    public void saveActivity(java.lang.String sessionId, java.lang.String jobId, short nodeId, short embeddedProcessCount, com.ecs.stellent.spp.Variable[] inputVariables, com.ecs.stellent.spp.Variable[] outputVariables) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProgressDetails activityCompleteAndProgress(java.lang.String sessionId, java.lang.String jobId, com.ecs.stellent.spp.Variable[] outputVariables, short embeddedProcessCount, short nodeId) throws java.rmi.RemoteException;
    public void pendingActivityComplete(java.lang.String sessionId, java.lang.String jobId, com.ecs.stellent.spp.Variable[] outputVariables, short embeddedProcessCount, short nodeId) throws java.rmi.RemoteException;
    public void pendingActivityCompleteUsingActivityName(java.lang.String sessionId, java.lang.String jobId, com.ecs.stellent.spp.Variable[] outputVariables, java.lang.String activityName) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobProperties getJobProps(java.lang.String sessionId, java.lang.String jobId, short jobDatabase) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobProperties3 getJobProps3(java.lang.String sessionId, java.lang.String jobId, short jobDatabase) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobProperties4 getJobProps4(java.lang.String sessionId, java.lang.String jobId, short jobDatabase) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobProperties6 getJobProps6(java.lang.String sessionId, java.lang.String jobId, boolean associatedJobs) throws java.rmi.RemoteException;
    public void cancelActivity(java.lang.String sessionId, short nodeId, short embeddedProcessCount, java.lang.String jobId) throws java.rmi.RemoteException;
    public void addNote(java.lang.String sessionId, java.lang.String jobId, java.lang.String note) throws java.rmi.RemoteException;
    public void updateNote(java.lang.String sessionId, java.lang.String jobId, java.util.Calendar dateNoteEntered, java.lang.String note) throws java.rmi.RemoteException;
    public void updateJobOwner(java.lang.String sessionId, java.lang.String jobId, java.lang.String jobOwnerID) throws java.rmi.RemoteException;
    public void updateJobOwners(java.lang.String sessionId, java.lang.String[] jobIds, java.lang.String jobOwnerID) throws java.rmi.RemoteException;
    public void changeJobState(java.lang.String sessionId, java.lang.String jobId, java.lang.String state) throws java.rmi.RemoteException;
    public void deleteNote(java.lang.String sessionId, java.lang.String jobId, java.util.Calendar dateNoteEntered) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityHistory[] getActivitiesCompletedByResource(java.lang.String sessionId, java.lang.String resourceId, short jobDatabase) throws java.rmi.RemoteException;
    public void performAction(java.lang.String sessionId, java.lang.String jobId, short actionType) throws java.rmi.RemoteException;
    public void performActions(java.lang.String sessionId, short actionType, java.lang.String[] jobIds) throws java.rmi.RemoteException;
    public short getUserCount(java.lang.String sessionId) throws java.rmi.RemoteException;
    public boolean accessPermitted(java.lang.String sessionId, java.lang.String jobId, short action) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.Variable[] getInitVarList(java.lang.String sessionId, java.lang.String processId) throws java.rmi.RemoteException;
    public java.lang.String[] getTrustedDomains() throws java.rmi.RemoteException;
    public void declineOfferedActivity(java.lang.String sessionId, java.lang.String jobId, short processId, short nodeId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityInfo takeAnyActivity(java.lang.String sessionId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityInfo takeAnyActivity4(java.lang.String sessionId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.MTSResourceDetails[] getResourcesWithSkillAndSecurity(java.lang.String sessionId, boolean useSkillLevel, short skillLevel, boolean useSecurityLevel, short securityLevel, boolean useGroupResourceId, java.lang.String groupResourceId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.MTSResourceDetails[] getResourcesWithSkillAndSecurityUsingGroupName(java.lang.String sessionId, boolean useSkillLevel, short skillLevel, boolean useSecurityLevel, short securityLevel, java.lang.String groupResourceName) throws java.rmi.RemoteException;
    public int getNumberOfActivitiesAssignedToResource(java.lang.String sessionId, java.lang.String resourceId, boolean useActivityName, java.lang.String activityName, boolean useProcessId, java.lang.String processId, short resourcesIncluded) throws java.rmi.RemoteException;
    public int getNumberOfActivitiesAssignedToResourceUsingResName(java.lang.String sessionId, java.lang.String resourceName, boolean useActivityName, java.lang.String activityName, boolean useProcessId, java.lang.String processId, short resourcesIncluded) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.MinJobDetails getMinJobDetails(java.lang.String sessionId, short jobDatabase, java.lang.String jobId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.CategoryDetails[] retrieveAllCategories(java.lang.String sessionId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProcessMapDetails[] getMapsForUser(java.lang.String sessionId, short accessType, boolean allVersions) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProcessMapDetails[] getMapsForUserUsingCategory(java.lang.String sessionId, short accessType, boolean allVersions, java.lang.String categoryId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProcessMapData[] getMinMapsForUser(java.lang.String sessionId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProcessMapData[] getMinMapsForUserUsingCategory(java.lang.String sessionId, java.lang.String categoryId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProcessMapData[] getMinMapsForUserUsingCategory2(java.lang.String sessionId, java.lang.String categoryId, short processType) throws java.rmi.RemoteException;
    public void restartJobUsingNodeName(java.lang.String sessionId, java.lang.String jobId, java.lang.String nodeName, com.ecs.stellent.spp.EmbeddedProcessList[] EPList, short restartType) throws java.rmi.RemoteException;
    public void restartJob(java.lang.String sessionId, java.lang.String jobId, short nodeId, com.ecs.stellent.spp.EmbeddedProcessList[] EPList, short restartType) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.VariableWithCategory[] getVariablesWithCategory(java.lang.String sessionId, java.lang.String ownerId, double version) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityInfo takeActivityFromJob(java.lang.String sessionId, java.lang.String jobId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityInfo takeActivityUsingProcess(java.lang.String sessionId, java.lang.String jobId, java.lang.String processId, short nodeId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityInfo takeActivityUsingActivityName(java.lang.String sessionId, java.lang.String jobId, java.lang.String activityName) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityInfo takeActivityUsingActivityNameAndProcess(java.lang.String sessionId, java.lang.String jobId, java.lang.String processId, java.lang.String activityName) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivitiesForStatus[] getActivitiesInJobWithStatus(java.lang.String sessionId, java.lang.String jobId, short status) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivitiesForStatus2[] getActivitiesInJobWithStatus2(java.lang.String sessionId, java.lang.String jobId, short status) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivitiesForStatus3[] getActivitiesInJobWithStatus3(java.lang.String sessionId, java.lang.String jobId, short status) throws java.rmi.RemoteException;
    public void processAutomaticActivityFailure(java.lang.String exceptionCode, java.lang.String jobId, short nodeId, short embeddedProcessCount, short autoActivityType, boolean cancelActivity) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobDetails[] getJobsUsingSearchCriteria(java.lang.String sessionId, java.util.Calendar startTimeFrom, boolean useStartTimeFrom, java.util.Calendar startTimeTo, boolean useStartTimeTo, java.util.Calendar finishTimeFrom, boolean useFinishTimeFrom, java.util.Calendar finishTimeTo, boolean useFinishTimeTo, java.lang.String creatorId, boolean useCreatorId, boolean workerResource, short status, java.lang.String processId, boolean useProcessId, double version, boolean useVersion, java.lang.String originServerId, boolean useOriginServerId, int maxNumToRetrieve, com.ecs.stellent.spp.Variable[] procTemplateVariables, java.lang.String categoryId, boolean useCategoryId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedJobs getExtendedJobsUsingSearchCriteria(java.lang.String sessionId, java.util.Calendar startTimeFrom, boolean useStartTimeFrom, java.util.Calendar startTimeTo, boolean useStartTimeTo, java.util.Calendar finishTimeFrom, boolean useFinishTimeFrom, java.util.Calendar finishTimeTo, boolean useFinishTimeTo, java.lang.String creatorId, boolean useCreatorId, boolean workerResource, short status, java.lang.String processId, boolean useProcessId, double version, boolean useVersion, java.lang.String originServerId, boolean useOriginServerId, int maxNumToRetrieve, java.lang.String categoryId, boolean useCategoryId, short priority, boolean usePriority, java.util.Calendar dueDateFrom, boolean useDueDateFrom, java.util.Calendar dueDateTo, boolean useDueDateTo, java.lang.String workQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedJobs getJobsUsingSearchCriteria4(java.lang.String sessionId, java.util.Calendar startTimeFrom, boolean useStartTimeFrom, java.util.Calendar startTimeTo, boolean useStartTimeTo, java.util.Calendar finishTimeFrom, boolean useFinishTimeFrom, java.util.Calendar finishTimeTo, boolean useFinishTimeTo, java.lang.String creatorId, boolean useCreatorId, boolean workerResource, short status, java.lang.String processId, boolean useProcessId, double version, boolean useVersion, java.lang.String originServerId, boolean useOriginServerId, int maxNumToRetrieve, java.lang.String categoryId, boolean useCategoryId, short priority, boolean usePriority, java.util.Calendar dueDateFrom, boolean useDueDateFrom, java.util.Calendar dueDateTo, boolean useDueDateTo, java.lang.String workQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean useJobOwner, java.lang.String jobOwnerID, boolean useJobState, java.lang.String jobStateName) throws java.rmi.RemoteException;
    public void updateJobOwnerUsingSearchCriteria(java.lang.String sessionId, java.util.Calendar startTimeFrom, boolean useStartTimeFrom, java.util.Calendar startTimeTo, boolean useStartTimeTo, java.util.Calendar finishTimeFrom, boolean useFinishTimeFrom, java.util.Calendar finishTimeTo, boolean useFinishTimeTo, java.lang.String creatorId, boolean useCreatorId, boolean workerResource, short status, java.lang.String processId, boolean useProcessId, double version, boolean useVersion, java.lang.String originServerId, boolean useOriginServerId, int maxNumToRetrieve, java.lang.String categoryId, boolean useCategoryId, short priority, boolean usePriority, java.util.Calendar dueDateFrom, boolean useDueDateFrom, java.util.Calendar dueDateTo, boolean useDueDateTo, java.lang.String workQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean useJobOwner, java.lang.String sJobOwnerID, java.lang.String newJobOwnerID, boolean useJobState, java.lang.String jobStateName) throws java.rmi.RemoteException;
    public int getNumberOfActivitiesUsingCriteria(java.lang.String sessionId, boolean usingJobId, java.lang.String jobId, boolean usingStatus, short status) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.EngineDetails[] getEngineList(java.lang.String sessionId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.WorkersInfo[] getWorkersForServer(java.lang.String sessionId, java.lang.String serverId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.WorkersInfo[] getWorkerGroupsForServer(java.lang.String sessionId, java.lang.String serverId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.WorkersInfo[] getMembersInGroupForServer(java.lang.String sessionId, java.lang.String resourceId, java.lang.String serverId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.Variable[] getVariables(java.lang.String sessionId, java.lang.String ownerId, double version) throws java.rmi.RemoteException;
    public java.lang.String[] recoverJobs(java.lang.String sessionId) throws java.rmi.RemoteException;
    public void recoverJob(java.lang.String sessionId, java.lang.String jobId) throws java.rmi.RemoteException;
    public boolean verifyNTUserandPassword(java.lang.String userName, java.lang.String domainName, java.lang.String password) throws java.rmi.RemoteException;
    public java.lang.String getServerID(java.lang.String sessionId) throws java.rmi.RemoteException;
    public boolean validateSession(java.lang.String sessionId) throws java.rmi.RemoteException;
    public boolean validateSession2(java.lang.String sessionId, javax.xml.rpc.holders.StringHolder resourceId) throws java.rmi.RemoteException;
    public void updateVariables(java.lang.String sessionId, java.lang.String ownerID, com.ecs.stellent.spp.VariableUpdate[] updatedVariables) throws java.rmi.RemoteException;
    public java.lang.String getXMLMapControlData(java.lang.String sessionId, java.lang.String jobId) throws java.rmi.RemoteException;
    public java.lang.String getEmbeddedXMLMapControlData(java.lang.String sessionId, java.lang.String processId, double version, boolean loadLatestVersion) throws java.rmi.RemoteException;
    public java.lang.String getXMLMapControlJobDataOnly(java.lang.String sessionId, java.lang.String jobId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.WorkQueue getWorkQueue(java.lang.String sessionId, int numberOfActivities, boolean useStartDueDate, java.util.Calendar startDateDue, short activityTypeFilter) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.WorkQueue getWorkQueueUsingActivityName(java.lang.String sessionId, int numberOfActivities, boolean useStartDueDate, java.util.Calendar startDateDue, short activityTypeFilter, java.lang.String activityName) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.WorkQueue getIndividualWorkQueue(java.lang.String sessionId, int numberOfActivitiesRq, boolean useStartDueDate, java.util.Calendar startDueDate, short activityTypeFilter, boolean useActivityName, java.lang.String activityName) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobScheduleDetails addSchedule(java.lang.String sessionId, java.lang.String scheduleName, java.lang.String businessProcessId, int timeSpan, short timeSpanPeriod, short noOfOccurances, short noOfJobsToCreate, boolean useStartDate, java.util.Calendar startDate, boolean useEndDate, java.util.Calendar endDate, com.ecs.stellent.spp.ScheduleVariable[] initialisationParams, boolean monthly, boolean useWeekDays, short daysOfWeek, boolean oneActiveAtTime, boolean scheduleActive, boolean useBusinessCalendar) throws java.rmi.RemoteException;
    public java.util.Calendar modifySchedule(java.lang.String sessionId, int scheduleId, java.lang.String businessProcessId, java.lang.String scheduleName, int timeSpan, short timeSpanPeriod, short noOfOccurances, short noOfJobsToCreate, boolean scheduleActive, boolean useStartDate, java.util.Calendar startDate, boolean useEndDate, java.util.Calendar endDate, com.ecs.stellent.spp.ScheduleVariable[] initialisationParams, boolean monthly, boolean useWeekDays, short daysOfWeek, boolean oneActiveAtTime, boolean useBusinessCalendar) throws java.rmi.RemoteException;
    public void deleteSchedule(java.lang.String sessionId, int scheduleId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobScheduleInfo retrieveSchedule(java.lang.String sessionId, int scheduleId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.SchedulePageInfo retrieveSchedulePage(java.lang.String sessionId, int scheduleId, short pageSize) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.VariableValueInfo[] getJobVariablesValues(java.lang.String sessionId, java.lang.String jobId, java.lang.String[] varIds) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.VariableValueInfo[] getServerVariablesValues(java.lang.String sessionId, java.lang.String[] varIds) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.CreateNewJobSyncDetails createNewJobSync(java.lang.String sessionId, java.lang.String processId, com.ecs.stellent.spp.Variable[] initParams, java.lang.String[] returnParamsIds) throws java.rmi.RemoteException;
    public java.lang.Object[][] getJaggedArray() throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedWorkQueue getExtendedWorkQueue(java.lang.String sessionId, int numberOfActivities, boolean useStartDueDate, java.util.Calendar startDateDue, short activityTypeFilter, java.lang.String wrkQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean returnJobIds, short usePriority, short prioritiesToRetrieve, boolean useLastDueDate, java.util.Calendar lastDueDate) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedWorkQueue3 getExtendedWorkQueue3(java.lang.String sessionId, int numberOfActivities, boolean useStartDueDate, java.util.Calendar startDueDate, long activityTypeFilter, java.lang.String wrkQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean returnJobIds, short usePriority, short prioritiesToRetrieve, java.lang.String activityName, java.lang.String resourceID, boolean combinedWorkqueue, boolean bUseJobRAGStatus, short jobRAGStatus, boolean bUseJobState, java.lang.String jobState, short pageDirection) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedWorkQueue2 getExtendedWorkQueue2(java.lang.String sessionId, int numberOfActivities, boolean useStartDueDate, java.util.Calendar startDueDate, short activityTypeFilter, java.lang.String wrkQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean returnJobIds, short usePriority, short prioritiesToRetrieve, java.lang.String activityName, java.lang.String resourceID, boolean combinedWorkqueue, short pageDirection) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedWorkQueue4 getExtendedWorkQueue4(java.lang.String sessionId, int numberOfActivities, boolean useStartDueDate, java.util.Calendar startDueDate, long activityTypeFilter, java.lang.String wrkQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean returnJobIds, short usePriority, short prioritiesToRetrieve, java.lang.String activityName, java.lang.String resourceID, boolean combinedWorkqueue, boolean bUseJobRAGStatus, short jobRAGStatus, boolean bUseJobState, java.lang.String jobState, short pageDirection, boolean bUseActivityRAGStatus, short activityRAGStatus) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedWorkQueue getExtendedWorkQueueUsingActivityName(java.lang.String sessionId, int numberOfActivities, boolean useStartDueDate, java.util.Calendar startDateDue, short activityTypeFilter, java.lang.String activityName, java.lang.String wrkQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean returnJobIds, short usePriority, short prioritiesToRetrieve, boolean useLastDueDate, java.util.Calendar lastDueDate) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedWorkQueue getExtendedIndividualWorkQueue(java.lang.String sessionId, int numberOfActivitiesRq, boolean useStartDueDate, java.util.Calendar startDueDate, short activityTypeFilter, boolean useActivityName, java.lang.String activityName, java.lang.String wrkQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean returnJobIds, short usePriority, short priorityToRetrieve, boolean useLastDueDate, java.util.Calendar lastDueDate) throws java.rmi.RemoteException;
    public java.lang.String createNewJobUsingStartDate(java.lang.String sessionId, java.lang.String businessProcessId, java.util.Calendar startDate, com.ecs.stellent.spp.Variable[] initialisationParms) throws java.rmi.RemoteException;
    public java.lang.String createNewJobAndStartAt(java.lang.String sessionId, java.lang.String businessProcessId, java.lang.String businessProcessName, java.lang.String nodeName, com.ecs.stellent.spp.Variable[] initialisationParms) throws java.rmi.RemoteException;
    public void activityCompleteWithTimeAndCost(java.lang.String sessionId, java.lang.String jobId, com.ecs.stellent.spp.Variable[] OPVars, short embeddedProcessCount, short nodeId, java.util.Calendar startTime, double cost) throws java.rmi.RemoteException;
    public java.lang.String createNewJobUsingVersion(java.lang.String sessionId, java.lang.String processId, double mapVersion, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.CreateNewJobSyncDetails createNewJobSyncUsingVersion(java.lang.String sessionId, java.lang.String processId, double mapVersion, com.ecs.stellent.spp.Variable[] initParams, java.lang.String[] returnParamsIds) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.MapVersionDetails[] getMapVersions(java.lang.String sessionId, java.lang.String processId, short mapStatus, short accessType) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.Variable[] getInitVarListUsingVersion(java.lang.String sessionId, java.lang.String processId, double mapVersion) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.VariableDisplayName[] getInitVarList3(java.lang.String sessionId, java.lang.String processId, double mapVersion) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProgressDetails createNewJobAndProgressUsingVersion(java.lang.String sessionId, java.lang.String processId, double version, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProgressDetails createNewJobAndProgressUsingNameAndVersion(java.lang.String sessionId, java.lang.String processName, double version, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createNewJobUsingMapNameAndVersion(java.lang.String sessionId, java.lang.String processName, double version, com.ecs.stellent.spp.Variable[] initParams) throws java.rmi.RemoteException;
    public java.lang.String createNewJobUsingStartDateUsingVersion(java.lang.String sessionId, java.lang.String businessProcessId, double version, java.util.Calendar startDate, com.ecs.stellent.spp.Variable[] initialisationParms) throws java.rmi.RemoteException;
    public java.lang.String createNewJobAndStartAtUsingVersion(java.lang.String sessionId, java.lang.String businessProcessId, java.lang.String businessProcessName, java.lang.String nodeName, double version, com.ecs.stellent.spp.Variable[] initialisationParms) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobVarHistoryDetails[] getJobVariableHistory(java.lang.String sessionId, java.lang.String jobID, short nodeID, short EPC, boolean usePerformDate, java.util.Calendar performDate) throws java.rmi.RemoteException;
    public short getInstallationType() throws java.rmi.RemoteException;
    public java.lang.Object getJobVariableValue(java.lang.String sessionId, java.lang.String jobId, java.lang.String varId) throws java.rmi.RemoteException;
    public void placeJobOnHold(java.lang.String sessionID, java.lang.String jobID, short holdType, java.util.Calendar activationDate, short activationPeriodWeeks, short activationPeriodDays, short activationPeriodHours, java.lang.String reasonForHold) throws java.rmi.RemoteException;
    public void resetJobVariables(java.lang.String sessionID, java.lang.String jobID, java.lang.String subJobID, short nodeID, short embeddedProcessCount, boolean useLatestHistory, java.util.Calendar setTime, short setTimeMilliSecs) throws java.rmi.RemoteException;
    public java.lang.String getSubJobXMLMapControlData(java.lang.String sessionId, java.lang.String subjobID, java.lang.String processID, double version) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedJobs getJobsUsingSearchCriteria5(java.lang.String sessionId, java.util.Calendar startTimeFrom, boolean useStartTimeFrom, java.util.Calendar startTimeTo, boolean useStartTimeTo, java.util.Calendar finishTimeFrom, boolean useFinishTimeFrom, java.util.Calendar finishTimeTo, boolean useFinishTimeTo, java.lang.String creatorId, boolean useCreatorId, boolean workerResource, short status, java.lang.String processId, boolean useProcessId, double version, boolean useVersion, java.lang.String originServerId, boolean useOriginServerId, int maxNumToRetrieve, java.lang.String categoryId, boolean useCategoryId, short priority, boolean usePriority, java.util.Calendar dueDateFrom, boolean useDueDateFrom, java.util.Calendar dueDateTo, boolean useDueDateTo, java.lang.String workQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean useJobOwner, java.lang.String jobOwnerID, boolean useJobState, java.lang.String jobStateName, com.ecs.stellent.spp.Variable[] processTemplateVariables) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ExtendedJobs2 getJobsUsingSearchCriteria6(java.lang.String sessionId, java.lang.String caseRef, boolean useCaseRef, java.util.Calendar startTimeFrom, boolean useStartTimeFrom, java.util.Calendar startTimeTo, boolean useStartTimeTo, java.util.Calendar finishTimeFrom, boolean useFinishTimeFrom, java.util.Calendar finishTimeTo, boolean useFinishTimeTo, java.lang.String creatorId, boolean useCreatorId, boolean workerResource, short status, java.lang.String processId, boolean useProcessId, double version, boolean useVersion, java.lang.String originServerId, boolean useOriginServerId, int maxNumToRetrieve, java.lang.String categoryId, boolean useCategoryId, short priority, boolean usePriority, java.util.Calendar dueDateFrom, boolean useDueDateFrom, java.util.Calendar dueDateTo, boolean useDueDateTo, java.lang.String workQueueDefnName, com.ecs.stellent.spp.FieldFilterConfig fieldFilter, boolean useJobOwner, java.lang.String jobOwnerID, boolean useJobState, java.lang.String jobStateName, boolean useJobType, short jobType, com.ecs.stellent.spp.Variable[] processTemplateVariables) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.SubJobDetails getSubJobDetails(java.lang.String sessionID, java.lang.String jobID, java.lang.String subJobID, java.lang.String subProcessID, double subJobVersion, short jobDatabase) throws java.rmi.RemoteException;
    public void updateJobPriority(java.lang.String sessionId, java.lang.String jobId, short jobPriority) throws java.rmi.RemoteException;
    public void updateActivityPriority(java.lang.String sessionId, java.lang.String jobId, short nodeId, short embeddedProcessCount, short activityPriority) throws java.rmi.RemoteException;
    public void updateSpend(java.lang.String sessionId, java.lang.String jobID, double value) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ActivityHistory2[] getProcessHistory(java.lang.String sessionId, java.lang.String jobID, boolean associatedJobs) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.Milestones[] getMilestones(java.lang.String sessionId, java.lang.String jobID) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.RoleInfo[] getRoles(java.lang.String sessionId, java.lang.String jobID) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.Events[] getEvents(java.lang.String sessionId, java.lang.String jobID) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.Notes[] getNotes(java.lang.String sessionId, java.lang.String jobID) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.JobInfo[] getAssociatedJobs(java.lang.String sessionId, java.lang.String jobId) throws java.rmi.RemoteException;
    public void raiseEvent(java.lang.String sessionId, java.lang.String jobid, java.lang.String event, java.lang.String eventSource) throws java.rmi.RemoteException;
    public void raiseEventUpdVars(java.lang.String sessionId, java.lang.String jobid, java.lang.String event, java.lang.String eventSource, com.ecs.stellent.spp.RaiseEventVars[] vVariables) throws java.rmi.RemoteException;
    public void revaluatePreconditon(java.lang.String sessionId, java.lang.String jobid) throws java.rmi.RemoteException;
    public void addToNumericVarValue(java.lang.String sessionId, java.lang.String ownerId, java.lang.String varId, java.lang.Object varValueToAdd) throws java.rmi.RemoteException;
    public void addRoleMember(java.lang.String sessionId, java.lang.String jobID, java.lang.String roleID, java.lang.String resourceID) throws java.rmi.RemoteException;
    public void deleteRoleMember(java.lang.String sessionId, java.lang.String jobID, java.lang.String roleID, java.lang.String resourceID) throws java.rmi.RemoteException;
    public void replaceRoleMembers(java.lang.String sessionId, java.lang.String jobID, java.lang.String roleID, java.lang.String[] resourceIDs) throws java.rmi.RemoteException;
    public void modifyMilestone(java.lang.String sessionId, java.lang.String jobId, java.lang.String milestoneName, java.util.Calendar newTargerDate) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.StateHistory[] getStateChangeHistory(java.lang.String sessionId, java.lang.String jobId) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.WorkqueueOverview getWorkqueueOverviewForResource(java.lang.String sessionId, java.lang.String resourceId, boolean getIndividualWorkLoad, boolean getCombinedWorkLoad, boolean getWorkqueueDefinitionWorkLoads, boolean useStartDate, java.util.Calendar startDate, boolean useEndDate, java.util.Calendar endDate) throws java.rmi.RemoteException;
    public void allocateActivity(java.lang.String sessionId, java.lang.String resourceId, java.lang.String jobId, short nodeId, short EPCount) throws java.rmi.RemoteException;
    public void allocateActivities(java.lang.String sessionId, java.lang.String resourceId, com.ecs.stellent.spp.ActivityRuntimeInfo[] activities) throws java.rmi.RemoteException;
    public java.lang.String[] getAllProcessMapStates(java.lang.String sessionID) throws java.rmi.RemoteException;
    public com.ecs.stellent.spp.ProcessMapDetails[] getMapsForUserBasedOnType(java.lang.String sessionId, short accessType, short processType, boolean allVersions) throws java.rmi.RemoteException;
    public void performAutoWorkAllocation(java.util.Calendar startDate, java.util.Calendar endDate) throws java.rmi.RemoteException;
}
