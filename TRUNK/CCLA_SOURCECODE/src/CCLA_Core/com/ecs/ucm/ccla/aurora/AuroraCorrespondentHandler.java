package com.ecs.ucm.ccla.aurora;

import intradoc.common.ServiceException;
import intradoc.data.DataException;
import intradoc.shared.SharedObjects;

import java.rmi.RemoteException;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Vector;

import com.aurora.webservice.Correspondent;
import com.ecs.ucm.ccla.Globals;
import com.ecs.ucm.ccla.aurora.compare.AuroraEntityComparator;
import com.ecs.ucm.ccla.aurora.compare.AuroraEntityComparisonOutcome;
import com.ecs.ucm.ccla.aurora.compare.CorrespondentFieldSet;
import com.ecs.ucm.ccla.aurora.compare.FieldGroup;
import com.ecs.ucm.ccla.aurora.compare.FieldGroupAmendmentDates;
import com.ecs.ucm.ccla.data.Address;
import com.ecs.ucm.ccla.data.AuroraCorrespondent;
import com.ecs.ucm.ccla.data.Company;
import com.ecs.ucm.ccla.data.Contact;
import com.ecs.ucm.ccla.data.Person;
import com.ecs.ucm.ccla.data.SystemConfigVar;
import com.ecs.utils.Log;
import com.ecs.utils.StringUtils;
import com.ecs.utils.stellent.embedded.FWFacade;

public class AuroraCorrespondentHandler 
 extends AuroraEntityHandler<Correspondent, Person> {

	// Determine whether new Correspondent Codes are generated by Aurora, when new
	// Correspondent records are added. If not, the codes are generated by a sequence 
	// in the Central DB and fed to Aurora.
	private static final boolean AURORA_GENERATED_CORR_IDS = !StringUtils.stringIsBlank(
	 SharedObjects.getEnvironmentValue("AURORA_AutoGenerateCorrCodes"));
	
	//Determine whether to use the abbreviated fullname 
	//i.e. Title (if exist) + first initial of FirstName + first initial of MiddleName 
	//(if exist) + LastName 
	//If this flag is not set, the full name is used: 
	//i.e. Title (if exist) + FirstName + MiddleName + LastName 
	private static final boolean AURORA_USE_ABBREVIATED_FULL_NAME = 
	 !StringUtils.stringIsBlank(
	 SharedObjects.getEnvironmentValue("AURORA_UseAbbreviatedFullName"));
	
	/* Determines whether multiple Aurora Correspondent maps for a single Person will
	 * share the same Correspondent Code.
	 * 
	 * If false, Correspondent Codes will always be uniquely generated, even for the
	 * same Person record.
	 * 
	 */
	private static final boolean PERSON_SINGLE_CORR_ID = 
	 !StringUtils.stringIsBlank(
	 SharedObjects.getEnvironmentValue("AURORA_PersonSingleCorrCode"));
	
	@Override
	public Correspondent buildAuroraEntityInstance(Person person,
			Company company, FWFacade facade) throws DataException {
		
		validateDBInstance(person, company, facade);
		
		AuroraCorrespondent corrMap = null;
		Correspondent corr = new Correspondent();	
		setDefaultValues(corr);
		
		// First determine whether a new Correspondent mapping needs to be added.
		Vector<AuroraCorrespondent> corrsMap = AuroraCorrespondent.
		 getCorrespondentsByPersonId(person.getPersonId(), facade);
		
		// Try and find a Correspondent mapping for the required Company.
		corrMap = AuroraCorrespondent.getByCompany(corrsMap, company);

		if (corrMap == null) {
			// Add new Correspondent mapping.
			String msg = "no existing Aurora Correspondent preferences for Company: " 
		     + company.getCode();
			
			throw new DataException(msg);
		}
		
		if (corrMap.getCorrId() != null)
			corr.setCorrespondentCode(corrMap.getCorrId());
		
		// Check if the Person record has had name data set correctly.
		// If 'Last Name' isn't explicitly set, this could be a legacy record which
		// hasn't been updated properly.
		if (StringUtils.stringIsBlank(person.getLastName())) {
			// Used to throw an exception here, not any more! Just post to Aurora the
			// full name field as it stands.
			corr.setName(person.getFullName());
		} else {
			corr.setName(
			 AURORA_USE_ABBREVIATED_FULL_NAME ?
			 person.getAbbrevatedFullName():person.getFullName());
		}
		
		corr.setSalutation(person.getSalutation());
		
		// Address and contact details
		corr.setAddress(AuroraWebServiceUtils.getAddressInstance(person.getContacts()));
		
		// Statement stuff
		corr.setReportAndAccountsEmailIndicator(corrMap.isReportEmailIndicator());
		corr.setReportAndAccountsMailIndicator(corrMap.isReportMailIndicator());
		corr.setReportUsage
		 (corrMap.getReportUsage() == null ? 1 : corrMap.getReportUsage());

		return corr;
	}
	
	
	/** Checks that the Person instance has the appropriate Aurora-Correspondent link
	 *  set up, and has Contact Points loaded/set.
	 *  
	 *  Also check that the nominated correspondence Address is set and appears to be
	 *  a valid address.
	 */
	@Override
	public void validateDBInstance(Person person, Company company,
	 FWFacade facade) throws DataException {
		
		AuroraCorrespondent corrMap = null;
		
		Vector<AuroraCorrespondent> corrsMap = AuroraCorrespondent.
		 getCorrespondentsByPersonId(person.getPersonId(), facade);
		
		// Try and find a Correspondent mapping for the required Company.
		corrMap = AuroraCorrespondent.getByCompany(corrsMap, company);
		
		if (corrMap == null) {
			String msg = "No existing Aurora Correspondent mapping for " 
			 + person.getFullName() + " (ID " + person.getPersonId() + 
			 ") to Company: " + company.getCode();
			
			Log.error(msg);
			throw new DataException(msg);
		}
		
		if (person.getContacts()==null) {
			String msg = "No Person contact information loaded";
			
			Log.error(msg);
			throw new DataException(msg);
		}
		
		Contact defaultAddressContact = Contact.getDefaultContact
		 (person.getContacts(), Contact.ADDRESS);
		
		if (defaultAddressContact == null) {
			String msg = "No nominated correspondence address set";
			
			Log.error(msg);
			throw new DataException(msg);
		}
		
		if (!defaultAddressContact.getAddress().isDataValid()) {
			String msg = "Nominated correspondence address doesn't " +
			 "appear to be a complete postal address.";
			
			Log.error(msg);
			throw new DataException(msg);
		}
	}
	
	public void validateAuroraInstance
	 (Correspondent corr, Company company, FWFacade facade) throws DataException {
		if (corr.getAddress() == null) {
			throw new DataException("No correspondent address set");
		}
	}
	
	@Override
	protected void setDefaultValues(Correspondent corr)
			throws DataException {
		corr.setTypeCode("");
	}

	@Override
	public void addAuroraEntity(Person person, Company company, FWFacade facade) 
	 throws DataException {
		
		Log.debug("Creating new Aurora Correspondent from Person ID " +
		 person.getPersonId() + ", Company " + company.getCode());
		
		try {
			AuroraCorrespondent corrMap = null;
			
			Vector<AuroraCorrespondent> corrsMap = AuroraCorrespondent.
			 getCorrespondentsByPersonId(person.getPersonId(), facade);
			
			// Find the Correspondent mapping for the required Company.
			corrMap = AuroraCorrespondent.getByCompany(corrsMap, company);
			
			// Ensure Aurora Correspondent with this Number/Company doesn't
			// already exist.
			Correspondent existingCorrespondent = 
			 getExistingAuroraEntity(person, company, facade);
			
			if (existingCorrespondent != null) {
				throw new ServiceException("correspondent record with Correspondent " +
				 "Number: " + corrMap.getCorrId() + ", Company: " + company.getCode()
				 + " already exists");
			}
			
			Correspondent newCorr = buildAuroraEntityInstance(person, company, facade);
			Integer newCorrId = corrMap.getCorrId();
			
			// If the Person-Aurora Mapping doesn't have a Corr ID assigned yet, and
			// the Central DB is responsible for generating the Corr IDs, assign one
			// now.
			if (newCorrId == null && !AURORA_GENERATED_CORR_IDS) {
				
				if (PERSON_SINGLE_CORR_ID) {
					// Check existing correspondent maps for this Person, for a non-null 
					// Corr ID. This can be recycled.
					for (AuroraCorrespondent corr : corrsMap) {
						if (corr.getCorrId() != null)
							newCorrId = corr.getCorrId();
					}
				}
				
				if (newCorrId == null) {
					// No existing Correspondent ID. Use the Person's PERSON_ID/
					// ELEMENT_ID instead.
					newCorrId = person.getPersonId();
					Log.debug("Using person's existing Correspondent Code: " +
					 newCorrId);
					
					// Fetch unique Corr ID from DB sequence
					// Don't use this sequence any more!
					//newCorrId = AuroraCorrespondent.getNewCorrespondentNumber(facade);
				} else {
					Log.debug("Using person's PERSON_ID as the Correspondent Code: " +
					 newCorrId);
				}
				
				// Set against Aurora Correspondent instance
				newCorr.setCorrespondentCode(newCorrId);
			}
			
			// Must set
			if (newCorr.getReportUsage()==0)
				newCorr.setReportUsage(1);
			
			validateAuroraInstance(newCorr, company, facade);
			Object retObj = addToAurora(newCorr, company, facade);
			
			if (AURORA_GENERATED_CORR_IDS && retObj != null) {
				newCorrId = (Integer)retObj;
				// Set against Person-Aurora Mapping
				corrMap.setCorrId(newCorrId);
				// Persist changes to Person-Aurora Mapping
				corrMap.persist(facade, Globals.Users.System);		
			}
			
			Log.debug("Successfully created new Aurora Correspondent from Person ID " +
			 person.getPersonId() + ", Company " + company.getCode());
			
		} catch (Exception e) {
			String msg = "Failed to create new Aurora correspondent: " + e.getMessage();
			
			Log.error(msg, e);
			throw new DataException(msg, e);
		}
	}

	@Override
	public Correspondent getExistingAuroraEntity(Person person,
			Company company, FWFacade facade) throws DataException {
		
		AuroraCorrespondent corrMap = null;
		Correspondent existingCorrespondent = null;
		
		Log.debug("Attempting to fetch existing Aurora Correspondent for Person ID " +
		 person.getPersonId() + ", Company " + company.getCode());
		
		validateDBInstance(person, company, facade);
		
		Vector<AuroraCorrespondent> corrsMap = AuroraCorrespondent.
		 getCorrespondentsByPersonId(person.getPersonId(), facade);
		
		if (corrsMap.isEmpty()) {
			// No mapped Correspondent Numbers for this Person
			String msg = "no mapped Correspondent Number for Person ID " + 
			 person.getPersonId();
			
			Log.debug(msg);
		}
		
		// Try and find a Correspondent mapping for the required Company.
		corrMap = AuroraCorrespondent.getByCompany(corrsMap, company);
		
		if (corrMap == null) {
			String msg = "No existing Aurora Correspondent mapping for " 
			 + person.getFullName() + " (ID " + person.getPersonId() + 
			 ") to Company: " + company.getCode();
			
			Log.error(msg);
			throw new DataException(msg);
		}
		
		if (AuroraWebServiceHandler.TEST_MODE) {
			Log.debug("Running in Web Service test mode.");
			SystemConfigVar testPersonId = SystemConfigVar.getCache().getCachedInstance
			 ("SDU_TestPersonId");
			
			if (testPersonId != null && testPersonId.getIntValue() != null) {
				Log.debug("Building test Aurora correspondent instance from Person ID " 
				 + testPersonId.getIntValue());
				
				existingCorrespondent = buildAuroraEntityInstance
				 (Person.get(testPersonId.getIntValue(), true, facade), company, facade);
			
			} else {
				Log.debug("No test Person ID found - returning null");
				existingCorrespondent = null;
			}
			
		} else {
			try {
				existingCorrespondent = AuroraWebServiceHandler.getAuroraWS().
				 getCorrespondentByCorrespondentCode
				 (company.getCode(), corrMap.getCorrId());
			
			} catch (Exception e) {
				// Assume error was thrown by Aurora, as Correspondent did not exist.
				Log.debug("Failed to fetch existing Aurora Correspondent: " 
				 + e.getMessage());
			}
		}
		
		if (existingCorrespondent != null)
			Log.debug("Found existing Aurora Correspondent with code " 
			 + existingCorrespondent.getCorrespondentCode());
		else
			Log.debug("No existing Aurora Correspondent found");
		
		return existingCorrespondent;
	}

	@Override
	public CorrespondentFieldSet getAuroraFieldSet(Correspondent auroraEntity) 
	 throws DataException {
		return new CorrespondentFieldSet(auroraEntity);
	}

	@Override
	protected Object addToAurora(Correspondent auroraEntity, Company company,
	 FWFacade facade) throws DataException {
		// Call Aurora Web Service to add the correspondent.
		Log.debug("Creating Aurora Correspondent: \n" + auroraEntity.toString());
		
		try {
			if (AuroraWebServiceHandler.TEST_MODE) {
				Log.debug("Web Service Test Mode: skipping call, returning null");
				return null;
			} else {
				Integer newCorrId = AuroraWebServiceHandler.getAuroraWS().createCorrespondent
				 (company.getCode(), auroraEntity, AURORA_GENERATED_CORR_IDS);
				
				return newCorrId;
			}
		} catch (Exception e) {
			Log.error("Failed to add Aurora correspondent", e);
			throw new DataException
			 ("Failed to add Aurora correspondent" + e.getMessage(), e);
		}
	}

	@Override
	protected Object updateInAurora(Correspondent auroraEntity, Company company,
	 FWFacade facade) throws DataException {
		// Call Aurora Web Service to update the correspondent.
		Log.debug("Updating Aurora Correspondent: \n" + auroraEntity.toString());
		
		try {
			if (AuroraWebServiceHandler.TEST_MODE) {
				Log.debug("Web Service Test Mode: skipping call, returning true");
				return true;
			} else {
				Boolean success = AuroraWebServiceHandler.getAuroraWS().amendCorrespondent
				 (company.getCode(), auroraEntity);
				
				return success;
			}
		} catch (Exception e) {
			Log.error("Failed to update Aurora correspondent", e);
			throw new DataException
			 ("Failed to update Aurora correspondent: " + e.getMessage(), e);
		}
	}
}
