package com.ecs.ucm.ccla.commproc;

import intradoc.data.DataResultSet;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.Vector;

import com.ecs.ucm.ccla.data.instruction.Instruction;
import com.ecs.ucm.ccla.data.instruction.RoutingModule;

/** Stores a list of recent errors generated by the Routing Module Manager.
 * 
 * @author Tom
 *
 */
public class InstructionErrorSpooler {
	
	public static final int MAX_SPOOL_SIZE = 50;
	
	private LinkedList<InstructionError> errors = 
	 new LinkedList<InstructionError>();

	public synchronized void append
	 (Instruction instr, RoutingModule module, String errorMsg, String stackTrace) {
		
		InstructionError instrError = new InstructionError(instr, module, errorMsg, stackTrace);
		errors.addFirst(instrError);
		
		while (errors.size() > MAX_SPOOL_SIZE)
			errors.removeLast();
	}
	

	public void append(Instruction instr, RoutingModule module, Exception e) {
		 //obtain the stacktrace in string form
		 StringWriter sw = new StringWriter();
		 e.printStackTrace(new PrintWriter(sw));
		 append(instr, module, e.getMessage(), sw.toString());
	}
	
	/**
	 * Fetches the errorSpooler and adds it to a dataResultSet
	 * @return drs
	 */
	public DataResultSet getErrorSpoolResultSet() {
		
		String[] cols = {"TIME_STAMP","INSTR_ID","MODULE_NAME","ERROR_MSG","STACK_TRACE"};
		DataResultSet drs = new DataResultSet(cols);
		
		for (InstructionError err : errors) {
			
			Vector row = new Vector();
			row.add(err.getDate());
			row.add(err.getInstruction().getInstructionId());
			row.add(err.getModule().getName());
			row.add(err.getErrorMessage());
			row.add(err.getStackTrace());
			drs.addRow(row);
			
		}
		
		return drs;
	}
	
	/**
	 * Clears the error spool
	 */
	public void clearErrorSpool(){
		errors.clear();
	}
}
